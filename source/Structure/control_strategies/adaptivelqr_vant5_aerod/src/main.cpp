/*
 * This file is part of the ProVANT simulator project.
 * Licensed under the terms of the MIT open source license. More details at
 * https://github.com/Guiraffo/ProVANT-Simulator/blob/master/LICENSE.md
 */
/**
 * @file This file contains the implementation of the adaptivelqrVant5Aerod class.
 *
 * @author Jonatam Campos
 *
 * The mathematical background used to design this controller is presented in
 * "Modeling and Robust Control for Full-Flight Envelope Trajectory Tracking of
 *  a QuadCP-VTOL Unmanned Aerial Vehicle" that is published in The Vertical
 * Flight Society's 77th Annual Forum & Technology Display, from authors:
 * CAMPOS, JONATAN ; CARDOSO, DANIEL NERI; RAFFO, GUILHERME VIANNA,
 * and is available at
 * https://www.researchgate.net/profile/Gv-Raffo/publication/354150051_Modeling_and_Robust_Control_for_Full-Flight_Envelope_Trajectory_Tracking_of_a_QuadCP-VTOL_Unmanned_Aerial_Vehicle/links/61279db2c69a4e48795dd36d/Modeling-and-Robust-Control-for-Full-Flight-Envelope-Trajectory-Tracking-of-a-QuadCP-VTOL-Unmanned-Aerial-Vehicle.pdf
 */

#include <control_strategies_base/icontroller.hpp>

#include <ros/ros.h>

#include <Eigen/Eigen>

#include <cmath>
#include <vector>

#include <simulator_msgs/Sensor.h>

class adaptivelqrVant5Aerod : public Icontroller
{
private:
  double e;
  double pi;
  double T;
  Eigen::VectorXd X;
  Eigen::VectorXd X_;
  Eigen::VectorXd Xref_;
  Eigen::VectorXd Xmatlab;
  Eigen::VectorXd Xrefmatlab;
  Eigen::MatrixXd K1;
  Eigen::MatrixXd K2;
  Eigen::MatrixXd K3;
  Eigen::MatrixXd K4;
  Eigen::MatrixXd K5;
  Eigen::MatrixXd K6;
  Eigen::MatrixXd K7;
  Eigen::MatrixXd K8;
  Eigen::MatrixXd K9;
  Eigen::MatrixXd K10;
  Eigen::MatrixXd K11;
  Eigen::MatrixXd K12;
  Eigen::MatrixXd K13;
  Eigen::MatrixXd RIB;
  Eigen::MatrixXd Wn;
  Eigen::VectorXd Uequ;
  Eigen::MatrixXd Ku;
  Eigen::VectorXd Erro;
  Eigen::VectorXd Input;
  Eigen::VectorXd Input2;
  Eigen::MatrixXd Xtrim;
  Eigen::MatrixXd Utrim;
  Eigen::VectorXd intqctil;
  Eigen::VectorXd Trajetoria;

public:
  adaptivelqrVant5Aerod()
    : RIB(3, 3)
    , Wn(3, 3)
    , X(20)
    , X_(22)
    , K1(11, 22)
    , K2(11, 22)
    , K3(11, 22)
    , K4(11, 22)
    , K5(11, 22)
    , K6(11, 22)
    , K7(11, 22)
    , K8(11, 22)
    , K9(11, 22)
    , K10(11, 22)
    , K11(11, 22)
    , K12(11, 22)
    , K13(11, 22)
    , Xref_(22)
    , Uequ(11)
    , Ku(11, 22)
    , Erro(22)
    , Input2(11)
    , Input(14)
    , Xtrim(18, 49)
    , Utrim(11, 49)
    , intqctil(4)
    , Trajetoria(31)
    , Xmatlab(24)
    , Xrefmatlab(24)
  {
    std::cout << "AdaptiveLQR Circular Trajectory" << std::endl;
    e = 2.718281828459046;
    T = 0.004;
    pi = 3.141592653589793;
    Xtrim << -1.5801e-14, -3.0901e-18, 1.8493e-17, -1.1395e-15, 1.0193e-15, -1.3961e-23, -1.7073e-15, -5.815e-16,
        4.6559e-16, -1.34e-14, -7.4282e-18, -7.3369e-25, -2.6091e-16, -1.2102e-23, 6.8758e-25, 4.8554e-25, 3.0684e-25,
        -3.9678e-17, -1.2608e-24, 2.1628e-16, -1.0032e-15, -3.6896e-22, -7.7142e-24, 8.6291e-16, -5.6789e-15,
        -4.2188e-17, 1.0873e-23, -1.7533e-16, -6.9399e-14, 8.2338e-20, 1.3697e-14, -1.6178e-23, -6.4518e-16,
        -1.1693e-15, -1.995e-22, 3.0871e-19, 8.4412e-20, -5.1233e-18, 2.8298e-17, 1.2057e-15, -1.3178e-20, 1.5409e-21,
        1.1567e-17, -8.9822e-21, 3.2837e-15, 1.5803e-17, -1.8977e-19, -1.3378e-18, 2.8633e-19, 8.3785e-14, -3.0901e-18,
        1.1931e-16, 1.6568e-14, -5.4901e-15, -1.3923e-23, -5.4629e-15, -5.815e-16, -1.9523e-15, -3.8349e-14, 7.4277e-18,
        7.3369e-25, 1.5612e-14, -1.2102e-23, -6.8758e-25, 4.8554e-25, -3.0684e-25, -3.9678e-17, 1.2608e-24, 2.1628e-16,
        -1.0008e-15, 3.6896e-22, 7.7142e-24, 8.6291e-16, 6.8369e-15, 4.2187e-17, -1.0871e-23, 1.7499e-16, 6.9401e-14,
        -8.2338e-20, -1.3695e-14, 1.6178e-23, 6.4518e-16, 1.1646e-15, -1.9794e-22, -3.087e-19, -8.4179e-20, 5.1233e-18,
        2.8298e-17, 1.2057e-15, 1.3178e-20, -1.5409e-21, -1.1567e-17, -8.9698e-21, -3.2837e-15, 1.5803e-17, 1.8977e-19,
        1.3378e-18, 2.8633e-19, 8.0407e-14, 3.0901e-18, -1.1931e-16, -1.6568e-14, 5.4901e-15, 1.3961e-23, 5.4629e-15,
        -5.815e-16, 1.9523e-15, 3.8349e-14, -7.4282e-18, -5.799e-25, -1.5612e-14, -1.2102e-23, 4.4753e-25, -4.2315e-25,
        2.3414e-25, -3.9678e-17, -1.2608e-24, -2.1628e-16, -1.0032e-15, 3.6896e-22, -7.7142e-24, -8.6291e-16,
        -6.8369e-15, -4.2188e-17, 1.0877e-23, -1.7533e-16, -6.9401e-14, 8.2338e-20, -1.3697e-14, 1.6178e-23,
        -6.4518e-16, -1.1693e-15, 1.995e-22, 3.0872e-19, 8.444e-20, -5.1233e-18, 2.8298e-17, -1.2057e-15, 1.3178e-20,
        1.5409e-21, 1.1567e-17, 8.9822e-21, -3.2837e-15, 1.5803e-17, 1.8977e-19, 1.3378e-18, 5.0646e-20, 7.7751e-14,
        3.0901e-18, -1.1931e-16, -1.6568e-14, -5.4901e-15, -1.391e-23, 5.4629e-15, 5.815e-16, -1.9523e-15, -3.8349e-14,
        -7.4279e-18, -7.3369e-25, -1.5612e-14, 1.1936e-23, -6.8758e-25, 4.8554e-25, -3.0684e-25, 3.9678e-17,
        -1.2608e-24, 2.1628e-16, -1.0032e-15, -3.6896e-22, -7.7142e-24, 8.6291e-16, 6.8369e-15, 4.2187e-17, 1.0875e-23,
        1.7531e-16, -6.9401e-14, 8.2338e-20, 1.3697e-14, -1.6178e-23, 6.4518e-16, 1.1657e-15, 1.995e-22, 3.0871e-19,
        8.0202e-20, -5.1233e-18, -8.0371e-18, -1.2057e-15, -1.3169e-20, 1.5409e-21, -1.1567e-17, -8.9822e-21,
        -3.2837e-15, 1.5803e-17, 1.8976e-19, -1.3378e-18, -2.8633e-19, 8.3785e-14, 1.9727e-07, 3.1563e-06, 1.5979e-05,
        5.0501e-05, 0.00012329, 0.00025566, 0.00047365, 0.00080802, 0.0012943, 0.0019727, 0.0028882, 0.0040906,
        0.0056343, 0.0075784, 0.0099869, 0.012928, 0.016476, 0.020709, 0.025709, 0.031563, 0.038365, 0.046212, 0.055205,
        0.06545, 0.077059, 0.090148, 0.10484, 0.12125, 0.13953, 0.15979, 0.18218, 0.20685, 0.23395, 0.26362, 0.29603,
        0.33134, 0.36972, 0.41134, 0.45638, 0.50501, 0.55744, 0.61385, 0.67443, 0.73939, 0.80894, 0.88327, 0.96262,
        1.0472, 8.1565e-14, 1.9727e-07, 3.1563e-06, 1.5979e-05, 5.0501e-05, 0.00012329, 0.00025566, 0.00047365,
        0.00080802, 0.0012943, 0.0019727, 0.0028882, 0.0040906, 0.0056343, 0.0075784, 0.0099869, 0.012928, 0.016476,
        0.020709, 0.025709, 0.031563, 0.038365, 0.046212, 0.055205, 0.06545, 0.077059, 0.090148, 0.10484, 0.12125,
        0.13953, 0.15979, 0.18218, 0.20685, 0.23395, 0.26362, 0.29603, 0.33134, 0.36972, 0.41134, 0.45638, 0.50501,
        0.55744, 0.61385, 0.67443, 0.73939, 0.80894, 0.88327, 0.96262, 1.0472, 1.293e-11, 0.00019283, 0.0007712,
        0.0017348, 0.003083, 0.0048153, 0.0069308, 0.009429, 0.012309, 0.015571, 0.019215, 0.023242, 0.027655, 0.032457,
        0.037653, 0.043251, 0.049263, 0.055703, 0.062592, 0.069954, 0.077822, 0.086239, 0.095257, 0.10494, 0.11538,
        0.12666, 0.13893, 0.15232, 0.16704, 0.18332, 0.20144, 0.22177, 0.24475, 0.27091, 0.30095, 0.33569, 0.37671,
        0.42324, 0.47904, 0.54484, 0.62243, 0.71403, 0.81931, 0.93924, 1.0716, 1.2121, 1.3552, 1.4941, 1.6265,
        1.1622e-11, 0.00019283, 0.0007712, 0.0017348, 0.003083, 0.0048153, 0.0069308, 0.009429, 0.012309, 0.015571,
        0.019215, 0.023242, 0.027655, 0.032457, 0.037653, 0.043251, 0.049263, 0.055703, 0.062591, 0.069953, 0.077822,
        0.086239, 0.095257, 0.10494, 0.11538, 0.12666, 0.13892, 0.15232, 0.16704, 0.18331, 0.20143, 0.22176, 0.24473,
        0.27089, 0.3009, 0.33557, 0.37538, 0.42353, 0.47923, 0.54503, 0.62272, 0.71332, 0.81927, 0.93927, 1.0716,
        1.2123, 1.3554, 1.4946, 1.6207, 5.0691e-14, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
        48, -8.3785e-14, -3.09e-18, 1.1931e-16, 1.6568e-14, -5.4901e-15, 2.8619e-24, -5.4629e-15, -5.3406e-16,
        -1.9523e-15, -3.8349e-14, 7.4282e-18, 7.337e-25, 1.5612e-14, -1.2102e-23, -6.8758e-25, 4.8554e-25, -3.0684e-25,
        -3.9678e-17, 1.2608e-24, -2.1628e-16, -1.0007e-15, -3.6896e-22, 7.7142e-24, 8.6291e-16, 6.8369e-15, 4.2188e-17,
        -1.0811e-23, 1.7533e-16, -6.7512e-14, -8.2339e-20, -1.3637e-14, 1.6178e-23, 6.4518e-16, 1.1693e-15, 1.995e-22,
        -3.0872e-19, -8.444e-20, -5.1233e-18, 2.8298e-17, 1.2053e-15, 1.3167e-20, -1.5414e-21, 1.1565e-17, 8.9822e-21,
        -3.2837e-15, -1.5803e-17, 1.8956e-19, 1.2889e-18, 2.8633e-19, -8.3785e-14, -3.0901e-18, 1.1931e-16, 1.6568e-14,
        -5.4901e-15, -1.3961e-23, -5.4629e-15, 5.815e-16, -1.9523e-15, -3.8349e-14, 7.4282e-18, 7.3369e-25, 1.5612e-14,
        1.2102e-23, 6.8758e-25, -4.8554e-25, -3.0684e-25, 3.9678e-17, 1.2608e-24, 2.1628e-16, 1.0032e-15, -3.6896e-22,
        7.7142e-24, 8.6291e-16, 6.8369e-15, 4.2188e-17, -1.0877e-23, 1.7533e-16, 6.9401e-14, -8.2338e-20, 1.3697e-14,
        -1.6178e-23, 6.4518e-16, 1.1693e-15, -1.995e-22, -3.0872e-19, -8.444e-20, 5.1233e-18, -2.8298e-17, 1.2057e-15,
        -1.3178e-20, -1.5409e-21, -1.1567e-17, -8.9822e-21, 3.2837e-15, -1.5803e-17, -1.8977e-19, -1.3378e-18,
        2.8635e-19, -8.966e-23, -3.3643e-23, 2.8467e-22, -9.0728e-21, 8.0818e-22, 6.1687e-26, -2.6723e-21, 2.2602e-23,
        -2.1825e-21, 8.7862e-21, 2.3148e-25, 7.3369e-25, 5.1093e-23, 3.8788e-25, -5.1972e-25, 4.8554e-25, 2.5696e-25,
        4.3361e-25, 5.1646e-25, 1.1019e-25, 1.4403e-23, -1.6073e-27, 1.0481e-24, -4.2557e-22, -7.6971e-23, -9.6969e-25,
        7.3872e-26, 4.9021e-23, 3.3896e-28, 1.6281e-27, -4.0331e-24, -2.2986e-25, -5.4957e-27, -1.7996e-26, 2.8318e-27,
        1.1005e-25, -1.0114e-23, 1.3925e-23, -3.7335e-26, 7.5374e-24, 6.7172e-25, -5.3747e-24, -1.8206e-24, -2.8915e-26,
        -1.8185e-22, 6.4658e-27, 2.336e-25, 6.1177e-23, -9.1242e-22, 2.338e-21, 2.485e-23, -7.2309e-22, -9.0839e-21,
        2.1894e-21, 2.6361e-25, -1.1997e-21, -8.2246e-22, -1.041e-21, -4.2948e-21, 2.2138e-24, -6.6315e-25, 1.6198e-20,
        -1.1292e-24, -2.863e-25, -2.4522e-26, 3.3797e-26, -2.8864e-25, 1.5222e-25, -2.2985e-24, 2.1072e-23, 7.0443e-27,
        -1.2973e-25, -3.0249e-22, 2.7998e-21, 6.4365e-24, -5.9062e-26, 9.0026e-23, 4.8911e-22, 2.8395e-26, -5.0246e-22,
        1.4186e-25, -1.4987e-23, -1.2661e-21, 6.7697e-26, -1.2815e-26, -4.5754e-23, 3.5881e-23, -4.6926e-25, 1.4503e-21,
        6.7292e-25, -5.6685e-24, -2.9591e-24, -1.6283e-25, 7.0811e-21, -6.3795e-26, 7.4815e-25, 2.2657e-22, -9.6684e-22,
        -3.6123e-21, -1.0942e-23, 2.7488e-22, -4.5038e-21, 2.6852e-21, 1.4117e-25, 1.2967e-21, -2.1354e-23, -2.2797e-21,
        7.8325e-21, -2.8471e-23, 2.1059e-25, 1.1131e-21, 6.1664e-25, 6.8758e-25, 2.8372e-25, 3.0684e-25, -1.375e-22,
        1.9145e-25, 2.6208e-22, -7.3422e-22, -1.5881e-26, 1.2101e-25, -7.9323e-22, -3.3254e-22, 2.4576e-22, 2.4839e-25,
        -3.3044e-22, 2.8205e-22, -7.6309e-26, -1.4175e-21, -4.5544e-25, 2.4564e-21, 1.571e-21, -7.7119e-27, -3.9939e-25,
        -2.3439e-23, 8.6468e-23, -1.4372e-25, 6.0416e-21, 1.8623e-24, -2.682e-24, 2.4627e-22, -2.0782e-25, 5.0155e-22,
        -1.9281e-26, -9.5665e-25, -1.3064e-22, -1.5524e-22, 1.1279e-26, -1.9778e-24, 8.3165e-23, 1.3671e-21, 6.6706e-22,
        -1.9674e-26, -1.293e-22, -7.0213e-22, 6.7985e-22, 4.0886e-21, 5.582e-26, 4.7537e-26, -1.3637e-26, -1.188e-25,
        4.0817e-26, -1.1147e-26, 1.1603e-26, 1.3129e-27, 1.2014e-26, -7.2062e-28, -4.9584e-27, 4.7892e-30, -9.7713e-27,
        -4.7239e-24, 1.8577e-28, -2.3991e-26, 8.7311e-28, -1.2545e-24, 1.7189e-26, -2.4708e-26, -3.2159e-22, 4.1788e-26,
        -4.5635e-27, 7.1543e-27, -3.8392e-26, -1.378e-25, -1.6648e-23, -8.2872e-24, -7.0222e-26, -5.219e-24, 1.1429e-24,
        2.2256e-23, -1.4844e-23, -3.512e-26, 4.6458e-27, 6.7554e-26, 2.6333e-25, -2.6684e-22, -8.6816e-23, 4.3481e-26,
        -1.4537e-23, 1.6242e-22, 1.8783e-21, 8.8458e-22, -3.3348e-26, 2.1512e-22, 1.6929e-22, 1.8542e-22, 2.9369e-21,
        1.7365e-26, -2.4078e-26, 6.5092e-27, 2.9089e-25, 1.3598e-25, -5.854e-28, -2.7148e-27, 5.3205e-27, -2.7009e-27,
        7.9219e-28, -4.4801e-27, 7.3698e-29, 3.6276e-27, 7.1233e-24, -6.4884e-28, -1.4776e-26, 1.5062e-28, 7.474e-25,
        -1.4891e-28, 1.6963e-28, -7.7132e-24, -4.1122e-27, 1.4531e-28, 6.1016e-29, 9.9732e-28, 8.6894e-28, -1.7333e-25,
        3.8331e-23, -6.4034e-26, 1.1229e-24, -3.0336e-25, 1.1498e-24, 2.7598e-25, -1.7921e-27, 3.8415e-26, 3.8565e-27,
        9.7484e-26, 5.9517e-25, 6.0781e-23, 2.6856e-26, 2.4332e-23, 4.8115e-22, 5.268e-21, 3.2337e-21, -4.6007e-26,
        -1.3496e-22, 1.6647e-22, 6.7312e-22, 6.2509e-22, 8.0803e-26, -1.2756e-25, 1.1586e-26, 1.2575e-24, -1.0506e-25,
        -2.0327e-26, 3.417e-27, -2.6423e-27, 1.5685e-26, -1.1145e-26, 2.2241e-26, 2.1287e-27, -6.4467e-27, 7.6085e-23,
        5.4495e-28, 1.1807e-25, 6.1756e-28, 5.759e-24, -2.6996e-27, 4.0391e-28, 3.0996e-22, -1.9418e-26, -1.5105e-27,
        2.2736e-27, -5.0147e-27, -9.4236e-26, 2.6115e-23, 6.6328e-23, -1.4571e-25, 4.3916e-25, 1.9385e-26, 1.6359e-24,
        -8.2592e-25, 4.7123e-26, 2.0145e-26, -8.1397e-28, 5.1641e-26, 7.6158e-23, 6.7387e-23, 6.6391e-28, -1.3827e-23,
        -5.0727e-24, 4.5328e-21, -1.5789e-21, -1.3675e-25, -4.4955e-22, -2.0692e-22, 5.0694e-22, 5.5073e-22, 3.6177e-26,
        -5.5633e-26, 3.4127e-27, 5.9316e-25, -2.3499e-26, 2.6176e-26, 1.7405e-26, 2.9863e-26, 1.2223e-26, 2.2013e-26,
        1.6578e-26, 1.6866e-27, 2.7599e-26, 1.6698e-24, 4.5507e-28, -1.0747e-25, -4.6751e-28, 1.3791e-23, 5.4064e-28,
        -4.1917e-27, 4.0266e-23, 3.4415e-26, -8.3923e-27, -3.3169e-27, 1.5754e-26, -9.1633e-27, 8.2673e-25, -1.7996e-23,
        1.8227e-25, 4.8305e-24, 1.5218e-24, 1.3679e-23, -4.5137e-24, -1.8819e-25, 1.9399e-26, -1.1834e-26, 6.5349e-26,
        1.9553e-23, 6.6255e-23;

    Utrim << 36.304, 36.29, 36.248, 36.179, 36.082, 35.957, 35.803, 35.622, 35.412, 35.173, 34.906, 34.609, 34.283,
        33.928, 33.543, 33.128, 32.682, 32.207, 31.701, 31.165, 30.599, 30.003, 29.378, 28.723, 28.041, 27.33, 26.594,
        25.832, 25.046, 24.237, 23.407, 22.557, 21.689, 20.804, 19.901, 18.977, 17.882, 17.164, 16.192, 15.219, 14.25,
        12.955, 12.089, 11.04, 9.9685, 8.8945, 7.8274, 6.7571, 5.8984, 36.304, 36.29, 36.248, 36.179, 36.082, 35.957,
        35.803, 35.622, 35.412, 35.173, 34.906, 34.609, 34.283, 33.928, 33.543, 33.128, 32.682, 32.207, 31.701, 31.165,
        30.599, 30.003, 29.378, 28.723, 28.041, 27.331, 26.594, 25.833, 25.047, 24.239, 23.409, 22.561, 21.694, 20.812,
        19.916, 19.012, 18.25, 17.082, 16.136, 15.155, 14.129, 13.382, 12.16, 11.08, 9.9988, 8.9218, 7.8576, 6.806,
        5.4886, 73.954, 73.921, 73.821, 73.654, 73.42, 73.121, 72.755, 72.324, 71.827, 71.265, 70.639, 69.949, 69.196,
        68.38, 67.502, 66.562, 65.561, 64.499, 63.378, 62.198, 60.96, 59.664, 58.311, 56.903, 55.44, 53.924, 52.356,
        50.738, 49.073, 47.363, 45.612, 43.826, 42.012, 40.178, 38.338, 36.51, 34.821, 32.92, 31.28, 29.777, 28.466,
        27.656, 26.89, 26.677, 26.954, 27.725, 28.971, 30.679, 32.675, 73.954, 73.921, 73.821, 73.654, 73.42, 73.121,
        72.755, 72.324, 71.827, 71.265, 70.639, 69.949, 69.196, 68.38, 67.502, 66.562, 65.561, 64.499, 63.378, 62.198,
        60.96, 59.664, 58.311, 56.903, 55.44, 53.923, 52.355, 50.736, 49.07, 47.36, 45.608, 43.821, 42.004, 40.167,
        38.321, 36.478, 34.556, 32.961, 31.299, 29.794, 28.515, 27.304, 26.776, 26.568, 26.832, 27.586, 28.814, 30.496,
        32.828, -0.056837, -0.056815, -0.05675, -0.056641, -0.056488, -0.05629, -0.056047, -0.055758, -0.055421,
        -0.055036, -0.054602, -0.054116, -0.053578, -0.052985, -0.052337, -0.05163, -0.050864, -0.050037, -0.049146,
        -0.04819, -0.047167, -0.046074, -0.044912, -0.043677, -0.042369, -0.040986, -0.039527, -0.037992, -0.03638,
        -0.034689, -0.032921, -0.031074, -0.029149, -0.027143, -0.025057, -0.022882, -0.02038, -0.018413, -0.01599,
        -0.01351, -0.010983, -0.0078986, -0.0054416, -0.0026653, 0.00016797, 0.0030133, 0.0058372, 0.0086336, 0.011039,
        -0.056837, -0.056815, -0.05675, -0.056641, -0.056488, -0.05629, -0.056047, -0.055758, -0.055421, -0.055036,
        -0.054602, -0.054116, -0.053578, -0.052985, -0.052337, -0.05163, -0.050864, -0.050037, -0.049146, -0.04819,
        -0.047167, -0.046075, -0.044912, -0.043677, -0.042369, -0.040987, -0.039528, -0.037993, -0.036381, -0.034692,
        -0.032924, -0.031079, -0.029156, -0.027156, -0.02508, -0.022935, -0.020957, -0.018284, -0.015901, -0.013409,
        -0.010793, -0.0085661, -0.0055528, -0.0027281, 0.0001206, 0.0029704, 0.0057899, 0.0085569, 0.011681, -1.0039,
        -1.0032, -1.001, -0.9975, -0.99254, -0.98617, -0.9784, -0.96923, -0.95867, -0.94672, -0.9334, -0.91871,
        -0.90266, -0.88525, -0.86649, -0.84637, -0.8249, -0.80207, -0.77787, -0.75228, -0.72528, -0.69684, -0.66692,
        -0.63546, -0.60239, -0.56762, -0.53105, -0.49254, -0.45191, -0.40896, -0.36342, -0.31496, -0.26319, -0.20761,
        -0.1476, -0.082442, -0.012338, 0.067918, 0.15479, 0.25132, 0.35833, 0.47226, 0.59768, 0.72242, 0.8374, 0.92915,
        0.98486, 0.99709, 0.96841, -1.0039, -1.0032, -1.001, -0.9975, -0.99254, -0.98617, -0.9784, -0.96923, -0.95867,
        -0.94672, -0.9334, -0.91871, -0.90266, -0.88525, -0.86649, -0.84637, -0.82491, -0.80208, -0.77788, -0.75229,
        -0.7253, -0.69687, -0.66695, -0.6355, -0.60244, -0.5677, -0.53115, -0.49266, -0.45206, -0.40915, -0.36367,
        -0.31529, -0.26361, -0.20813, -0.14825, -0.083181, -0.010884, 0.065563, 0.15204, 0.24773, 0.35318, 0.47106,
        0.59141, 0.71389, 0.82663, 0.91623, 0.97015, 0.98121, 0.94798, -7.9357e-14, -7.936e-14, -7.9479e-14,
        -6.2911e-14, -5.7421e-14, -5.7421e-14, -5.1958e-14, -5.254e-14, -5.0589e-14, -1.224e-14, -1.2247e-14,
        -1.2247e-14, -2.786e-14, -2.786e-14, -2.786e-14, -2.786e-14, -2.786e-14, -2.7899e-14, -2.7899e-14, -2.8116e-14,
        -2.9117e-14, -2.9117e-14, -2.9117e-14, -2.8254e-14, -2.1417e-14, -2.1459e-14, -2.1459e-14, -2.1635e-14,
        4.7767e-14, 4.7767e-14, 3.4073e-14, 3.4073e-14, 3.3428e-14, 3.226e-14, 3.226e-14, 3.226e-14, 3.226e-14,
        3.2255e-14, 3.2227e-14, 3.1021e-14, 3.1021e-14, 3.1021e-14, 3.1009e-14, 3.1009e-14, 2.7726e-14, 2.7741e-14,
        2.7741e-14, 2.774e-14, 2.774e-14, 8.2463e-14, 8.246e-14, 8.258e-14, 9.9147e-14, 9.3657e-14, 9.3657e-14,
        8.8194e-14, 8.7625e-14, 8.5673e-14, 4.7324e-14, 4.7331e-14, 4.7331e-14, 3.1719e-14, 3.1719e-14, 3.1719e-14,
        3.1719e-14, 3.1719e-14, 3.1679e-14, 3.1679e-14, 3.1463e-14, 3.0462e-14, 3.0462e-14, 3.0462e-14, 3.1325e-14,
        3.8162e-14, 3.8204e-14, 3.8204e-14, 3.8379e-14, -3.1023e-14, -3.1023e-14, -4.4713e-14, -4.4713e-14, -4.5358e-14,
        -4.4193e-14, -4.4193e-14, -4.4193e-14, -4.4193e-14, -4.4188e-14, -4.4216e-14, -4.301e-14, -4.301e-14,
        -4.301e-14, -4.2999e-14, -4.2999e-14, -4.6282e-14, -4.6267e-14, -4.6267e-14, -4.6266e-14, -4.6265e-14,
        8.377e-14, 8.3767e-14, 8.3887e-14, 6.7319e-14, 7.2809e-14, 7.2809e-14, 6.7346e-14, 6.7882e-14, 6.9834e-14,
        1.0818e-13, 1.0818e-13, 1.0818e-13, 9.2563e-14, 9.2563e-14, 9.2563e-14, 9.2563e-14, 9.2563e-14, 9.2603e-14,
        9.2603e-14, 9.2387e-14, 9.3388e-14, 9.3388e-14, 9.3388e-14, 9.2525e-14, 8.5704e-14, 8.5662e-14, 8.5662e-14,
        8.5487e-14, 1.5489e-13, 1.5489e-13, 1.6849e-13, 1.6849e-13, 1.6785e-13, 1.6668e-13, 1.6668e-13, 1.6668e-13,
        1.6668e-13, 1.6667e-13, 1.6665e-13, 1.6544e-13, 1.6544e-13, 1.6544e-13, 1.6543e-13, 1.6543e-13, 1.6871e-13,
        1.6873e-13, 1.6873e-13, 1.6873e-13, 1.6873e-13;

    K1 << 7.3667, -20.522, -23.252, 0.083602, -3.4741, -2.9699, -9.0272, -9.9609, -4.3002, 4.3725, 9.0638, -4.9568,
        -6.1813, -0.061145, 0.059281, 0.0019642, -0.2048, -0.095991, 3.0394, 0.078333, -2.5496, 2.7635, 7.3667, 20.522,
        -23.252, -0.083608, -2.9699, -3.4741, -9.9609, -9.0272, -4.3002, -4.3725, 9.0639, 4.9568, -6.1812, 0.061136,
        0.0019642, 0.059281, -0.095991, -0.2048, 3.0394, -0.078335, -2.5496, -2.7635, 9.6377, -31.418, 14.863, -1.0814,
        1.5327, 2.6905, 7.4419, 6.8397, 2.4435, 6.6122, 11.692, -7.6564, 6.118, -1.166, -0.0008014, 0.004844, 0.53751,
        0.24297, 3.9314, -0.44489, 1.4205, 4.154, 9.6377, 31.418, 14.863, 1.0814, 2.6905, 1.5327, 6.8397, 7.4419,
        2.4435, -6.6121, 11.692, 7.6564, 6.118, 1.166, 0.004844, -0.00080139, 0.24297, 0.53751, 3.9314, 0.44489, 1.4205,
        -4.1539, 0.037136, -0.040377, 2.0836, 0.55154, 1.7007, -0.18964, 2.0779, -0.84863, 0.50932, 0.023573, 0.010498,
        0.015824, 0.27868, 0.53685, 0.7541, 0.00012988, 0.036879, -0.0069013, 0.026756, 0.24127, 0.33257, 0.019176,
        0.037136, 0.040378, 2.0836, -0.55154, -0.18964, 1.7007, -0.84863, 2.0779, 0.50932, -0.023573, 0.010497,
        -0.015824, 0.27868, -0.53685, 0.00012988, 0.7541, -0.0069013, 0.036879, 0.026756, -0.24127, 0.33257, -0.019176,
        0.18525, -0.16117, 3.1596, 1.5199, 2.1661, -0.90222, 6.8071, -2.834, 0.71919, 0.054399, 0.23872, -0.058263,
        0.77484, 1.4935, 0.0062111, -0.00064203, 0.85817, -0.022359, 0.073496, 0.6616, 0.46801, 0.04233, 0.18525,
        0.16117, 3.1596, -1.5199, -0.90222, 2.1661, -2.834, 6.8071, 0.71919, -0.054397, 0.23872, 0.058264, 0.77484,
        -1.4935, -0.00064203, 0.0062111, -0.022359, 0.85817, 0.073496, -0.6616, 0.46801, -0.042329, 4.7465e-18,
        -4.3273e-17, 1.8736e-17, 9.7496e-17, 1.2139e-16, -1.2376e-16, 3.1427e-16, -3.1301e-16, 3.0627e-18, 8.3891e-18,
        4.4033e-18, -2.703e-18, 1.9524e-18, 9.7751e-17, 2.3269e-18, -3.655e-18, 2.0464e-17, -4.545e-17, 2.9164e-18,
        4.3165e-17, 1.887e-18, 5.3407e-18, 1.3563e-18, 3.8878e-17, -8.9018e-18, -2.2096e-18, -4.2046e-18, 5.3844e-18,
        -1.0169e-17, 9.8973e-18, -3.8135e-18, -1.1684e-17, 5.3213e-19, 7.3841e-18, 3.4836e-18, -1.7178e-18, 1.7175e-18,
        -1.669e-18, -1.6981e-19, 1.0412e-18, -1.6823e-19, -1.0564e-18, -2.1126e-18, -4.0569e-18, 5.9105e-19, 4.0479e-23,
        2.274e-17, 9.3435e-25, 8.4252e-18, 8.4252e-18, 6.645e-18, 6.645e-18, 5.606e-18, -1.4952e-23, 3.3367e-19,
        1.9653e-24, 2.9461e-18, 1.2327e-24, -5.3651e-19, -5.3651e-19, 1.6094e-19, 1.6094e-19, 3.726e-19, 4.0768e-25,
        3.6694e-18, -2.5644e-23;

    K2 << 8.793, -16.144, -58.854, 4.6271, -3.5938, -1.7607, -10.83, -7.4611, -3.3767, 3.1448, 7.537, -4.3491, -7.3267,
        -1.4022, 0.058328, 0.0033418, -0.22114, -0.079346, 3.6734, 1.829, -2.2266, 1.9953, 8.7931, 16.144, -58.855,
        -4.6269, -1.7607, -3.5939, -7.4611, -10.83, -3.3768, -3.1451, 7.5371, 4.3491, -7.3267, 1.4023, 0.0033417,
        0.058328, -0.079348, -0.22114, 3.6734, -1.829, -2.2266, -1.9953, 7.4823, -26.26, -18.742, 6.1256, 0.34941,
        3.7803, 3.4727, 10.203, 2.3455, 5.3998, 9.0178, -6.7606, 5.9679, -3.6334, -0.0025609, 0.0069731, 0.50793,
        0.25998, 3.2456, 2.3554, 1.2183, 3.4965, 7.4824, 26.26, -18.743, -6.1255, 3.7802, 0.34937, 10.203, 3.4726,
        2.3454, -5.3995, 9.0179, 6.7607, 5.9678, 3.6333, 0.0069728, -0.0025611, 0.25998, 0.50793, 3.2456, -2.3553,
        1.2183, -3.4965, 0.24312, 0.59037, 1.8371, 0.45126, 1.8216, -0.16822, 2.2727, -0.96725, 0.59802, -0.19798,
        0.082711, 0.03767, 0.23923, 0.69079, 0.75431, 0.00018134, 0.037167, -0.0065337, 0.083594, 0.19296, 0.35964,
        -0.14506, 0.24313, -0.59041, 1.8371, -0.45126, -0.16822, 1.8216, -0.96726, 2.2727, 0.59802, 0.19801, 0.082716,
        -0.037669, 0.23923, -0.6908, 0.00018135, 0.75431, -0.0065335, 0.037167, 0.083597, -0.19296, 0.35964, 0.14505,
        0.27954, 1.4841, 2.3038, 1.2646, 2.3393, -1.0019, 7.2276, -3.2525, 0.77606, -0.53677, 0.22682, -0.00024284,
        0.72139, 1.9105, 0.0064709, -0.00083735, 0.85762, -0.022495, 0.1109, 0.53371, 0.49169, -0.39317, 0.27956,
        -1.4842, 2.3038, -1.2646, -1.0019, 2.3393, -3.2525, 7.2276, 0.77608, 0.53684, 0.22683, 0.00024723, 0.7214,
        -1.9105, -0.00083732, 0.0064709, -0.022495, 0.85762, 0.11091, -0.5337, 0.4917, 0.39316, 0.0053294, 1.144e-07,
        -0.035207, 5.5537e-08, -0.0015809, -0.0015809, -0.0052994, -0.0052994, -0.0019781, -7.0046e-08, 0.0046324,
        -5.9599e-10, -0.0042057, 3.1235e-08, 7.6577e-07, 7.6576e-07, -8.8151e-05, -8.8151e-05, 0.00223, 1.9992e-08,
        -0.0013098, 1.0271e-08, 2.226e-08, 0.020141, -2.4212e-07, -0.0038394, 0.002193, -0.002193, 0.0054043,
        -0.0054044, -4.3804e-08, -0.0042916, 2.2978e-08, 0.0049473, -1.3655e-08, 0.0037117, 5.4841e-06, -5.4844e-06,
        0.00016415, -0.00016415, 1.1736e-08, -0.0014545, -2.7528e-08, -0.0028094, 3.3427e-13, -2.4133e-08, -3.3676e-13,
        -2.4908e-08, -1.9976e-08, 1.9976e-08, -6.4412e-08, 6.4413e-08, 2.4733e-13, 1.3609e-08, 2.9315e-13, 4.8553e-09,
        1.4982e-13, -3.5813e-08, -5.3977e-11, 5.3978e-11, -2.6596e-09, 2.6596e-09, 1.4387e-13, -1.0589e-08, 1.5757e-13,
        1.0768e-08;

    K3 << 9.8858, -11.584, -98.341, 6.5117, -2.8981, -1.0305, -10.625, -6.7711, -2.0619, 1.9119, 6.7036, -3.7577,
        -9.6567, -1.368, 0.057192, 0.0021944, -0.23431, -0.072417, 4.3751, 2.384, -1.64, 1.2319, 9.8859, 11.584,
        -98.342, -6.5113, -1.0305, -2.8982, -6.771, -10.625, -2.062, -1.9124, 6.7036, 3.7576, -9.6567, 1.3684,
        0.0021942, 0.057192, -0.072421, -0.23431, 4.3751, -2.3839, -1.6401, -1.232, 4.3692, -19.567, -22.693, 9.2875,
        -0.082028, 3.7863, 2.0544, 10.718, 2.0721, 3.7719, 5.5989, -5.8151, 6.1047, -4.2298, -0.0024947, 0.0074112,
        0.48934, 0.26264, 2.1331, 3.343, 1.1034, 2.5559, 4.3693, 19.567, -22.694, -9.2874, 3.7861, -0.082089, 10.717,
        2.0544, 2.0719, -3.7714, 5.599, 5.8152, 6.1046, 4.2294, 0.0074106, -0.0024952, 0.26263, 0.48933, 2.1331, -3.343,
        1.1033, -2.556, 0.27756, 0.71727, 1.086, 0.32487, 1.9641, -0.18877, 2.5532, -1.1987, 0.68767, -0.26712, 0.12116,
        0.026428, 0.17542, 0.92734, 0.75451, 0.00013189, 0.037299, -0.0067154, 0.093512, 0.13232, 0.38967, -0.20356,
        0.27758, -0.71734, 1.0859, -0.32486, -0.18877, 1.9642, -1.1987, 2.5533, 0.68769, 0.26718, 0.12117, -0.026424,
        0.17542, -0.9274, 0.00013192, 0.75451, -0.0067147, 0.037299, 0.093521, -0.13232, 0.38968, 0.20353, 0.2889,
        1.7808, 1.4802, 0.9549, 2.584, -1.1911, 7.8397, -3.95, 0.83651, -0.7152, 0.20143, -0.024961, 0.63938, 2.5362,
        0.0067806, -0.0012072, 0.85635, -0.023853, 0.11804, 0.37784, 0.51915, -0.54319, 0.28896, -1.781, 1.4799,
        -0.95489, -1.1911, 2.5841, -3.95, 7.8399, 0.83656, 0.71536, 0.20147, 0.024978, 0.6394, -2.5363, -0.0012071,
        0.0067808, -0.023851, 0.85635, 0.11807, -0.37784, 0.51918, 0.54316, 0.023606, 6.4291e-07, -0.23404, 4.5877e-07,
        -0.0046815, -0.0046816, -0.020197, -0.020197, -0.00487, -6.3218e-07, 0.016255, -4.33e-08, -0.022287, 4.5494e-07,
        3.6141e-07, 3.6138e-07, -0.00036115, -0.00036114, 0.010471, 1.6259e-07, -0.0038815, -6e-08, 5.0798e-09,
        0.061787, -1.4227e-06, -0.025097, 0.010137, -0.010137, 0.026658, -0.026659, -3.8827e-07, -0.012885, 4.0017e-08,
        0.016954, -1.2632e-07, 0.018489, 2.3902e-05, -2.3904e-05, 0.0007034, -0.00070342, 8.118e-09, -0.0089663,
        -2.4568e-07, -0.008889, 5.2411e-11, -2.0031e-06, -1.4152e-10, -1.3855e-06, -1.6157e-06, 1.6158e-06, -5.1343e-06,
        5.1344e-06, 5.9372e-11, 1.1676e-06, 3.8722e-11, 3.2016e-07, 3.2164e-11, -3.2899e-06, -3.9743e-09, 3.9746e-09,
        -1.694e-07, 1.694e-07, 2.4104e-11, -5.4177e-07, 3.7333e-11, 9.3564e-07;

    K4 << 9.7505, -9, -127.44, 7.349, -2.3244, -0.79939, -9.7877, -6.4601, -1.2412, 1.2393, 5.3418, -3.2897, -11.702,
        -1.0087, 0.055988, 0.00030343, -0.24155, -0.063107, 4.6503, 2.502, -1.2343, 0.8335, 9.7505, 9.0007, -127.44,
        -7.3485, -0.79935, -2.3245, -6.4598, -9.7881, -1.2413, -1.2403, 5.3419, 3.2896, -11.702, 1.0096, 0.00030315,
        0.055988, -0.063115, -0.24154, 4.6504, -2.5018, -1.2343, -0.83375, 2.035, -15.519, -10.629, 10.679, -0.17559,
        3.4315, 1.5617, 10.21, 1.7634, 2.8296, 3.3717, -5.0532, 6.5914, -4.2622, -0.0015294, 0.0073704, 0.47761,
        0.25886, 1.1633, 3.5885, 1.0137, 2.0381, 2.035, 15.519, -10.63, -10.679, 3.4311, -0.17566, 10.209, 1.562, 1.763,
        -2.8287, 3.3717, 5.0533, 6.5913, 4.2613, 0.0073696, -0.0015301, 0.25886, 0.47761, 1.1633, -3.5885, 1.0135,
        -2.0382, 0.24471, 0.69437, 0.61942, 0.26526, 2.0356, -0.24498, 2.7447, -1.4009, 0.71563, -0.28169, 0.10325,
        0.008399, 0.13158, 1.1489, 0.75456, 1.1296e-05, 0.036263, -0.0063784, 0.086502, 0.10153, 0.39975, -0.2214,
        0.24475, -0.69447, 0.6192, -0.26525, -0.24498, 2.0357, -1.4009, 2.7448, 0.71567, 0.28178, 0.10327, -0.008392,
        0.13159, -1.149, 1.1352e-05, 0.75456, -0.0063767, 0.036263, 0.086521, -0.10153, 0.39977, 0.22135, 0.26814,
        1.6987, 0.93901, 0.82541, 2.7467, -1.3542, 8.2126, -4.5157, 0.87056, -0.74834, 0.16265, -0.064375, 0.55047,
        3.1097, 0.0068765, -0.0015363, 0.85152, -0.02373, 0.11535, 0.30278, 0.53641, -0.58683, 0.26825, -1.6989,
        0.93819, -0.82541, -1.3542, 2.7468, -4.5157, 8.213, 0.87065, 0.74862, 0.16273, 0.064419, 0.55052, -3.11,
        -0.0015361, 0.0068768, -0.023725, 0.85152, 0.11541, -0.30278, 0.53647, 0.58677, 0.051943, 1.8445e-06, -0.67842,
        1.4537e-06, -0.0084856, -0.0084861, -0.042557, -0.042559, -0.0067599, -2.6572e-06, 0.028919, -2.9322e-07,
        -0.060896, 2.4129e-06, -7.4455e-06, -7.4451e-06, -0.00081241, -0.00081237, 0.024828, 5.0639e-07, -0.0066571,
        -6.5935e-07, -4.6949e-07, 0.11332, -4.9725e-07, -0.065605, 0.023997, -0.023999, 0.066089, -0.066092,
        -1.4166e-06, -0.023715, -1.8751e-07, 0.032863, -5.1688e-07, 0.047699, 5.4469e-05, -5.4476e-05, 0.0016517,
        -0.0016518, -2.3084e-07, -0.021906, -8.9706e-07, -0.017438, 1.1707e-09, -2.3389e-05, -6.537e-09, -1.5515e-05,
        -2.1956e-05, 2.1957e-05, -6.8779e-05, 6.8783e-05, 1.2733e-09, 1.4864e-05, 8.1166e-10, 3.9217e-06, 8.2631e-10,
        -4.9511e-05, -5.0149e-08, 5.0156e-08, -1.8868e-06, 1.8869e-06, 5.8043e-10, -5.5647e-06, 7.8463e-10, 1.2132e-05;

    K5 << 8.912, -7.2361, -142.11, 7.6906, -1.8922, -0.85286, -8.3471, -5.9372, -0.80588, 0.80556, 3.9155, -2.8525,
        -12.869, -0.48845, 0.055494, -0.0010661, -0.23743, -0.042502, 4.5644, 2.4564, -0.98173, 0.57364, 8.912, 7.237,
        -142.11, -7.6899, -0.85279, -1.8924, -5.9364, -8.3476, -0.80601, -0.80728, 3.9156, 2.8523, -12.869, 0.49029,
        -0.0010665, 0.055494, -0.042512, -0.2374, 4.5644, -2.4562, -0.98182, -0.57419, 0.68617, -12.693, 2.653, 11.223,
        -0.037738, 3.0044, 1.3893, 9.1368, 1.5755, 2.2025, 2.2275, -4.3494, 7.0169, -4.0101, -0.00041271, 0.006984,
        0.46511, 0.25019, 0.51602, 3.5452, 0.97243, 1.6859, 0.68604, 12.692, 2.653, -11.223, 3.0039, -0.037813, 9.1358,
        1.3902, 1.5751, -2.201, 2.2275, 4.3496, 7.0168, 4.0083, 0.0069831, -0.0004138, 0.2502, 0.4651, 0.51595, -3.5452,
        0.97214, -1.6859, 0.20002, 0.64681, 0.4655, 0.24542, 2.0565, -0.31515, 2.8571, -1.5517, 0.70409, -0.28097,
        0.075685, -0.0093839, 0.11005, 1.3562, 0.7545, -0.00012628, 0.034195, -0.0051672, 0.074627, 0.087515, 0.39453,
        -0.22667, 0.20008, -0.64694, 0.46501, -0.24542, -0.31516, 2.0566, -1.5517, 2.8573, 0.70414, 0.28109, 0.075716,
        0.0093942, 0.11006, -1.3564, -0.00012619, 0.7545, -0.0051644, 0.034196, 0.07466, -0.087513, 0.39456, 0.2266,
        0.25503, 1.5632, 0.48327, 0.79882, 2.8357, -1.4731, 8.3428, -4.925, 0.89812, -0.7401, 0.13485, -0.10575,
        0.44632, 3.6321, 0.006771, -0.0017954, 0.84288, -0.021766, 0.11516, 0.2723, 0.55056, -0.59876, 0.25522, -1.5634,
        0.48128, -0.79885, -1.4731, 2.8359, -4.925, 8.3434, 0.89825, 0.74057, 0.13499, 0.10584, 0.44642, -3.6327,
        -0.001795, 0.0067715, -0.021756, 0.84288, 0.11527, -0.27231, 0.55064, 0.59866, 0.083995, 4.1126e-06, -1.3406,
        3.3686e-06, -0.013486, -0.013488, -0.066878, -0.066884, -0.0083084, -8.0221e-06, 0.037582, -1.1241e-06,
        -0.11921, 8.5544e-06, -2.2551e-05, -2.2549e-05, -0.0013488, -0.0013486, 0.043108, 1.1318e-06, -0.0096909,
        -2.5456e-06, -2.2452e-06, 0.17099, 1.3633e-05, -0.1214, 0.04412, -0.044126, 0.1263, -0.12631, -3.791e-06,
        -0.037111, -1.0356e-06, 0.049522, -1.4925e-06, 0.097206, 9.6853e-05, -9.6873e-05, 0.0030301, -0.0030303,
        -1.1953e-06, -0.038078, -2.3669e-06, -0.028986, 1.1674e-08, -0.00013427, -9.7109e-08, -9.2038e-05, -0.00014266,
        0.00014268, -0.00044041, 0.00044045, 1.1253e-08, 9.0889e-05, 7.6574e-09, 2.3606e-05, 9.2379e-09, -0.00035464,
        -3.0453e-07, 3.046e-07, -1.0193e-05, 1.0194e-05, 6.2381e-09, -3.0638e-05, 6.7636e-09, 7.5494e-05;

    K6 << 7.7521, -5.6607, -144.02, 7.6339, -1.4318, -1.099, -6.0649, -5.3195, -0.5573, 0.41798, 2.687, -2.4265,
        -12.967, 0.42416, 0.056274, -0.001345, -0.2199, -0.0087954, 4.2317, 2.3106, -0.79819, 0.30876, 7.7522, 5.6617,
        -144.02, -7.633, -1.0989, -1.432, -5.3182, -6.0654, -0.55744, -0.42057, 2.6871, 2.426, -12.967, -0.42111,
        -0.0013457, 0.056275, -0.0088055, -0.21986, 4.2318, -2.3103, -0.79828, -0.30968, 0.042843, -10.234, 11.547,
        11.102, 0.31617, 2.4885, 1.5677, 7.3436, 1.5171, 1.6566, 1.6917, -3.6707, 7.0897, -3.2815, 0.00035489, 0.006008,
        0.44787, 0.23613, 0.15701, 3.3257, 0.97976, 1.3315, 0.042617, 10.233, 11.548, -11.102, 2.4879, 0.31607, 7.3424,
        1.5695, 1.5166, -1.6545, 1.6916, 3.6711, 7.0896, 3.2785, 0.0060072, 0.0003533, 0.23616, 0.44786, 0.15688,
        -3.3258, 0.97939, -1.3315, 0.16099, 0.59553, 0.40959, 0.24904, 2.0404, -0.38526, 2.89, -1.6441, 0.66769,
        -0.27205, 0.05467, -0.025982, 0.10203, 1.5488, 0.75436, -0.00025723, 0.031005, -0.0030388, 0.063666, 0.082466,
        0.37893, -0.22571, 0.16108, -0.59571, 0.40875, -0.24902, -0.38526, 2.0405, -1.6442, 2.8903, 0.66776, 0.27222,
        0.054709, 0.025995, 0.10205, -1.5491, -0.00025709, 0.75436, -0.0030344, 0.031006, 0.063719, -0.082461, 0.37897,
        0.22561, 0.25013, 1.4091, 0.032745, 0.84239, 2.8497, -1.5394, 8.2249, -5.1483, 0.9275, -0.70648, 0.11666,
        -0.15302, 0.32501, 4.0927, 0.0064624, -0.0019684, 0.83029, -0.017509, 0.11746, 0.26851, 0.56472, -0.59287,
        0.25044, -1.4094, 0.028772, -0.84248, -1.5394, 2.8499, -5.1483, 8.226, 0.92768, 0.70723, 0.11687, 0.15318,
        0.32518, -4.0936, -0.0019677, 0.006463, -0.017492, 0.83031, 0.11763, -0.26853, 0.56483, 0.59273, 0.11385,
        7.491e-06, -2.1218, 6.9225e-06, -0.01994, -0.019942, -0.084382, -0.084395, -0.010371, -1.8995e-05, 0.040337,
        -3.0353e-06, -0.18805, 2.2434e-05, -3.3688e-05, -3.3677e-05, -0.0017935, -0.0017931, 0.062284, 2.2173e-06,
        -0.013135, -6.7453e-06, -6.8122e-06, 0.22836, 6.6292e-05, -0.18221, 0.070751, -0.070764, 0.20752, -0.20753,
        -8.733e-06, -0.053047, -3.1422e-06, 0.063402, -3.4262e-06, 0.17438, 0.00015181, -0.00015186, 0.0048169,
        -0.0048171, -3.8211e-06, -0.054089, -5.3355e-06, -0.043523, 7.7657e-08, -0.00054177, -8.4629e-07, -0.0003888,
        -0.00062368, 0.00062378, -0.0018954, 0.0018956, 6.5194e-08, 0.00038035, 4.8075e-08, 9.8795e-05, 6.1526e-08,
        -0.0017167, -1.2401e-06, 1.2405e-06, -3.678e-05, 3.6789e-05, 4.4312e-08, -0.0001217, 3.839e-08, 0.00032216;

    K7 << 6.5012, -4.0437, -136.19, 7.3314, -0.75731, -1.5212, -2.8866, -5.0758, -0.33182, -0.034919, 1.7311, -2.0519,
        -12.099, 2.1852, 0.058419, -0.00048483, -0.19522, 0.036429, 3.7547, 2.1235, -0.60564, -0.051201, 6.5015, 4.0447,
        -136.2, -7.3302, -1.5211, -0.75737, -5.0738, -2.8867, -0.33189, 0.031459, 1.7313, 2.0513, -12.099, -2.181,
        -0.00048574, 0.058421, 0.036428, -0.19514, 3.7549, -2.1231, -0.6057, 0.04981, -0.17536, -7.8556, 15.363, 10.538,
        0.90284, 1.7886, 2.3615, 4.715, 1.5557, 1.0703, 1.4454, -3.069, 6.7466, -1.6666, 0.00055296, 0.0043838, 0.42332,
        0.22149, 0.0023171, 3.0203, 1.0253, 0.88348, -0.17555, 7.8544, 15.364, -10.539, 1.7879, 0.90272, 4.714, 2.3646,
        1.555, -1.0672, 1.4455, 3.0696, 6.7467, 1.6622, 0.0043836, 0.00055093, 0.22154, 0.42334, 0.0022154, -3.0204,
        1.0249, -0.88347, 0.13399, 0.54169, 0.26184, 0.26628, 1.9977, -0.43646, 2.8248, -1.6649, 0.62146, -0.2537,
        0.043906, -0.041015, 0.097743, 1.7134, 0.75417, -0.00034804, 0.026422, -6.9254e-05, 0.056333, 0.082216, 0.35917,
        -0.21909, 0.13411, -0.54196, 0.26062, -0.26619, -0.43646, 1.9978, -1.665, 2.8253, 0.62155, 0.25392, 0.04395,
        0.041034, 0.097756, -1.7139, -0.00034784, 0.75417, -6.3082e-05, 0.026422, 0.05641, -0.082198, 0.35922, 0.21891,
        0.24189, 1.2189, -0.26384, 0.94676, 2.7675, -1.538, 7.8135, -5.1038, 0.95709, -0.63997, 0.10179, -0.20783,
        0.2029, 4.4319, 0.0059428, -0.0020149, 0.81367, -0.010081, 0.11637, 0.28405, 0.57769, -0.56589, 0.24235,
        -1.2191, -0.27091, -0.94694, -1.5379, 2.7679, -5.1037, 7.8153, 0.95735, 0.64108, 0.1021, 0.20809, 0.20315,
        -4.4333, -0.0020138, 0.0059436, -0.010056, 0.8137, 0.11664, -0.28409, 0.57783, 0.5657, 0.13733, 1.0986e-05,
        -2.8974, 1.317e-05, -0.027068, -0.027071, -0.087892, -0.087914, -0.012804, -3.7096e-05, 0.037558, -6.3786e-06,
        -0.2537, 4.5581e-05, -2.2225e-05, -2.2197e-05, -0.0019941, -0.0019933, 0.079518, 4.0222e-06, -0.016642,
        -1.4521e-05, -1.6687e-05, 0.27871, 0.00020837, -0.23432, 0.10305, -0.10307, 0.30404, -0.30405, -1.8423e-05,
        -0.070772, -7.6673e-06, 0.071992, -6.5306e-06, 0.28578, 0.00022111, -0.00022121, 0.0069263, -0.0069269,
        -9.8041e-06, -0.066301, -1.1097e-05, -0.060423, 4.1316e-07, -0.0017904, -5.5284e-06, -0.0013661, -0.0021551,
        0.0021557, -0.0064244, 0.0064255, 3.0893e-07, 0.0012783, 2.419e-07, 0.00034381, 2.8701e-07, -0.0066383,
        -3.945e-06, 3.9471e-06, -0.00010164, 0.00010168, 2.494e-07, -0.00040623, 1.8245e-07, 0.0011109;

    K8 << 5.3266, -2.3287, -122.51, 7.0626, 0.26365, -2.139, 0.98816, -5.6474, -0.0077784, -0.61943, 1.0464, -1.7854,
        -10.624, 5.436, 0.061397, 0.0011255, -0.17921, 0.094972, 3.2317, 1.9741, -0.34327, -0.57147, 5.3275, 2.3295,
        -122.53, -7.061, -2.1387, 0.26399, -5.6448, 0.98884, -0.0075567, 0.6152, 1.047, 1.7846, -10.623, -5.431,
        0.0011251, 0.061401, 0.095, -0.17911, 3.2323, -1.9737, -0.34312, 0.5695, -0.17817, -5.4956, 15.552, 9.9339,
        1.7829, 0.79473, 4.0686, 1.273, 1.6775, 0.35924, 1.3197, -2.6204, 6.1201, 1.5225, 0.00024946, 0.0023723,
        0.38484, 0.21944, -0.033892, 2.7458, 1.1104, 0.26848, -0.17793, 5.4942, 15.546, -9.9344, 0.79431, 1.7829,
        1.2728, 4.0736, 1.6769, -0.35514, 1.32, 2.6213, 6.1206, -1.5286, 0.0023738, 0.00024742, 0.21954, 0.38489,
        -0.033713, -2.7459, 1.11, -0.26856, 0.12051, 0.4783, -0.058342, 0.28691, 1.9353, -0.44418, 2.626, -1.5821,
        0.58648, -0.21982, 0.042012, -0.053181, 0.089566, 1.8124, 0.75394, -0.00035524, 0.020259, 0.0035685, 0.052671,
        0.083161, 0.34317, -0.20428, 0.12065, -0.4787, -0.059733, -0.28667, -0.44418, 1.9354, -1.5824, 2.6267, 0.58657,
        0.2201, 0.042056, 0.053207, 0.08957, -1.8132, -0.00035495, 0.75394, 0.0035771, 0.020258, 0.052772, -0.08311,
        0.34323, 0.20391, 0.22054, 0.96121, -0.18425, 1.0904, 2.5494, -1.4354, 6.9967, -4.6497, 0.98141, -0.51868,
        0.087431, -0.2644, 0.10378, 4.4934, 0.0052044, -0.0018779, 0.79318, 0.0011707, 0.10604, 0.30998, 0.58582,
        -0.5047, 0.2212, -0.96144, -0.19573, -1.0907, -1.4351, 2.5499, -4.6495, 6.9993, 0.98177, 0.5203, 0.087884,
        0.2648, 0.10413, -4.4953, -0.0018762, 0.0052057, 0.0012058, 0.79323, 0.10644, -0.31006, 0.58603, 0.50445,
        0.15314, 1.3107e-05, -3.5747, 2.3258e-05, -0.033236, -0.033235, -0.076901, -0.076933, -0.014298, -6.3551e-05,
        0.030976, -1.1279e-05, -0.30584, 7.6429e-05, 2.4786e-05, 2.4842e-05, -0.0019507, -0.0019496, 0.093284,
        6.8374e-06, -0.019333, -2.7442e-05, -3.5719e-05, 0.31804, 0.00053028, -0.26797, 0.13714, -0.13719, 0.39944,
        -0.39945, -3.6695e-05, -0.08806, -1.6647e-05, 0.074881, -1.121e-05, 0.4314, 0.00030667, -0.00030686, 0.0092555,
        -0.0092564, -2.1932e-05, -0.072694, -2.2234e-05, -0.078355, 1.9423e-06, -0.0052841, -3.0652e-05, -0.0044072,
        -0.0064562, 0.0064586, -0.018683, 0.018686, 1.3539e-06, 0.003774, 1.0936e-06, 0.0010974, 1.0876e-06, -0.022633,
        -1.0661e-05, 1.067e-05, -0.00022578, 0.00022596, 1.2316e-06, -0.0012537, 8.2987e-07, 0.0034117;

    K9 << 4.3206, -0.55247, -106.4, 7.062, 1.5561, -2.8578, 4.8096, -6.7128, 0.49953, -1.3011, 0.58981, -1.6465,
        -8.9414, 10.605, 0.064127, 0.0031584, -0.19597, 0.17977, 2.7312, 1.9161, 0.032819, -1.2682, 4.3232, 0.55289,
        -106.45, -7.0598, -2.8565, 1.5574, -6.7092, 4.8112, 0.50064, 1.2962, 0.59126, 1.6456, -8.9402, -10.6, 0.0031611,
        0.064133, 0.17986, -0.19582, 2.7329, -1.9155, 0.033601, 1.2653, -0.091188, -3.0889, 14.014, 9.7231, 2.9978,
        -0.51756, 6.5811, -2.6224, 1.9374, -0.52225, 1.2415, -2.3728, 5.4042, 7.2463, -0.00045592, 0.00057789, 0.31255,
        0.25447, -0.015851, 2.6089, 1.2724, -0.60043, -0.089461, 3.0874, 13.978, -9.7235, -0.51698, 2.9986, -2.6214,
        6.5886, 1.9375, 0.52775, 1.2427, 2.3739, 5.4052, -7.2541, 0.00058343, -0.00045614, 0.25464, 0.31268, -0.014663,
        -2.609, 1.2725, 0.59988, 0.11827, 0.38897, -0.49138, 0.29122, 1.8431, -0.38668, 2.2313, -1.3318, 0.58245,
        -0.15789, 0.0448, -0.05781, 0.074109, 1.7482, 0.7537, -0.00026273, 0.012961, 0.0072795, 0.050858, 0.079474,
        0.33711, -0.17562, 0.11839, -0.3896, -0.49221, -0.2907, -0.38669, 1.8433, -1.3323, 2.2326, 0.5825, 0.15827,
        0.044832, 0.057853, 0.074122, -1.7495, -0.0002622, 0.7537, 0.0072929, 0.01296, 0.05097, -0.079368, 0.33718,
        0.17487, 0.18218, 0.58311, 0.45274, 1.2121, 2.1286, -1.1672, 5.5661, -3.5734, 0.99413, -0.30516, 0.07411,
        -0.30701, 0.042872, 3.9146, 0.0042411, -0.001517, 0.77024, 0.015072, 0.083388, 0.32858, 0.58347, -0.38484,
        0.18301, -0.58326, 0.43579, -1.2127, -1.1667, 2.1296, -3.5732, 5.5701, 0.99463, 0.30753, 0.074744, 0.3076,
        0.043378, -3.9174, -0.0015143, 0.0042434, 0.01512, 0.77034, 0.083912, -0.32873, 0.58375, 0.3845, 0.16241,
        1.4483e-05, -4.1209, 3.9814e-05, -0.037103, -0.037105, -0.056669, -0.056726, -0.013623, -0.00010385, 0.022401,
        -1.8293e-05, -0.34224, 0.00012086, 0.00010338, 0.00010347, -0.0018216, -0.0018204, 0.10352, 1.141e-05,
        -0.020457, -4.8992e-05, -6.9156e-05, 0.34155, 0.0011718, -0.28438, 0.16156, -0.16168, 0.45291, -0.45288,
        -7.0501e-05, -0.098508, -3.3748e-05, 0.074213, -2.072e-05, 0.58327, 0.00040934, -0.00040973, 0.011918, -0.01192,
        -4.4263e-05, -0.074296, -4.3687e-05, -0.093605, 8.7385e-06, -0.014646, -0.00015824, -0.013618, -0.01749,
        0.017502, -0.047736, 0.047748, 5.9576e-06, 0.010199, 4.8797e-06, 0.0033117, 4.0205e-06, -0.071703, -2.534e-05,
        2.5381e-05, -0.00037858, 0.00037928, 5.7928e-06, -0.0037245, 3.8744e-06, 0.0099074;

    K10 << 3.507, 0.91365, -89.808, 6.9845, 2.405, -3.0206, 6.0916, -5.849, 1.3082, -1.7413, 0.30389, -1.5067, -7.3149,
        15.805, 0.064991, 0.0059081, -0.26136, 0.29983, 2.2786, 1.8458, 0.5794, -1.9452, 3.5144, -0.91123, -89.95,
        -6.9804, -2.9529, 2.4546, -5.8821, 6.0467, 1.3172, 1.734, 0.30833, 1.5057, -7.3111, -15.788, 0.0060922, 0.06514,
        0.29949, -0.26129, 2.2835, -1.8447, 0.58522, 1.9386, 0.041671, -0.72796, 12.187, 9.866, 4.0616, -1.6428, 7.8574,
        -4.7923, 2.5292, -1.3871, 1.1873, -2.2395, 4.7207, 15.15, -0.0020703, 0.00016569, 0.17636, 0.35599, 0.022491,
        2.5829, 1.6197, -1.7212, 0.048359, 0.74261, 12.03, -9.854, -1.5911, 4.1283, -4.7898, 7.771, 2.5294, 1.3864,
        1.1915, 2.2385, 4.7234, -15.08, 0.00029448, -0.0018687, 0.35559, 0.17646, 0.027312, -2.5797, 1.62, 1.7083,
        0.12172, 0.24314, -0.87876, 0.23509, 1.6713, -0.24912, 1.5402, -0.8161, 0.61271, -0.053572, 0.047029, -0.044113,
        0.050493, 1.2932, 0.7534, -0.00012093, 0.0067468, 0.0087957, 0.048014, 0.059789, 0.33835, -0.12917, 0.12443,
        -0.24917, -0.89047, -0.23903, -0.24924, 1.7033, -0.83966, 1.5625, 0.62579, 0.055178, 0.047746, 0.044948,
        0.050793, -1.322, -0.00010827, 0.75347, 0.0088599, 0.0066618, 0.049284, -0.060877, 0.3457, 0.13013, 0.12399,
        0.018348, 1.8621, 1.2146, 1.4156, -0.66984, 3.3824, -1.733, 0.98099, 0.015195, 0.063374, -0.31645, 0.026313,
        2.1073, 0.0030444, -0.00098848, 0.75003, 0.026572, 0.046544, 0.31634, 0.55877, -0.18883, 0.12439, -0.015784,
        1.8436, -1.2123, -0.65097, 1.4365, -1.7322, 3.3479, 0.97781, -0.011523, 0.063891, 0.31638, 0.027251, -2.0959,
        -0.00094031, 0.0031087, 0.026342, 0.74976, 0.047049, -0.31574, 0.55691, 0.18719, 0.16704, 9.0771e-05, -4.5473,
        8.9229e-05, -0.037635, -0.038567, -0.033317, -0.033517, -0.010538, -0.00021539, 0.012796, -2.7598e-05, -0.36699,
        0.00049512, 0.00019478, 0.00019262, -0.0018385, -0.0018252, 0.11088, 2.5472e-05, -0.019866, -0.00013134,
        -0.00013385, 0.33206, 0.0030272, -0.30711, 0.14572, -0.14874, 0.37775, -0.3747, -4.2113e-06, -0.087496,
        -8.0976e-05, 0.076655, -8.2077e-05, 0.61667, 0.00052559, -0.0005342, 0.016276, -0.016195, -9.7694e-05, -0.07767,
        -9.2704e-06, -0.095449, 4.5118e-05, -0.037071, -0.0010434, -0.037265, -0.039299, 0.040121, -0.093654, 0.092958,
        9.893e-06, 0.024159, 2.4512e-05, 0.0086594, 1.1393e-05, -0.20216, -4.8511e-05, 5.0882e-05, -0.00035517,
        0.00033536, 3.2204e-05, -0.0098568, 8.7332e-06, 0.02724;

    K11 << 2.8835, 1.0565, -72.913, 5.3549, 1.6394, -1.2974, 2.2296, -0.6871, 2.6801, -1.4847, 0.13129, -1.0427, -5.866,
        13.872, 0.063412, 0.0096693, -0.29813, 0.3613, 1.8671, 1.3864, 1.3978, -2.0099, 2.8923, -1.0566, -73.119,
        -5.3454, -1.3072, 1.6269, -0.67248, 2.249, 2.6832, 1.4774, 0.13683, 1.0418, -5.8601, -13.862, 0.0096444,
        0.063384, 0.36181, -0.29735, 1.8741, -1.3839, 1.4013, 1.9987, 0.25947, 0.52011, 11.177, 8.4686, 3.3115,
        -0.64287, 3.2911, -0.83848, 3.9523, -1.6851, 1.1299, -1.7688, 4.0147, 17.31, -0.0046477, 0.0027443, 0.052461,
        0.43911, 0.077192, 2.1803, 2.3913, -2.5168, 0.27244, -0.52622, 10.882, -8.4656, -0.64603, 3.2876, -0.83065,
        3.3401, 3.9618, 1.698, 1.1381, 1.7713, 4.0226, -17.342, 0.0027519, -0.0047162, 0.44009, 0.053518, 0.086805,
        -2.1796, 2.3987, 2.5097, 0.12767, 0.073801, -0.92141, 0.12553, 1.4287, -0.041503, 0.63137, -0.1472, 0.68124,
        0.028101, 0.042593, -0.01235, 0.020615, 0.46196, 0.75304, 7.7705e-05, 0.0025837, 0.0068761, 0.043284, 0.029666,
        0.34375, -0.11761, 0.12636, -0.073769, -0.9219, -0.12169, -0.041487, 1.4187, -0.14515, 0.6318, 0.67367,
        -0.027518, 0.042486, 0.012403, 0.021011, -0.45866, 7.6476e-05, 0.75302, 0.0068696, 0.0026612, 0.04287,
        -0.028764, 0.34011, 0.11337, 0.03506, -0.56679, 4.4465, 1.2094, 0.54131, -0.048919, 1.1936, 0.057708, 0.86276,
        0.22734, 0.057129, -0.33847, 0.072698, -0.31925, 0.0016753, -0.00026306, 0.72851, 0.038944, -0.0066356, 0.30991,
        0.46593, 0.0010221, 0.037277, 0.56663, 4.3977, -1.213, -0.050289, 0.54187, 0.056881, 1.2108, 0.86826, -0.22211,
        0.058686, 0.33991, 0.073317, 0.30918, -0.00026296, 0.0016735, 0.039088, 0.72882, -0.0056131, -0.31077, 0.46858,
        -0.00018538, 0.16856, 4.9648e-05, -4.8891, 0.00013238, -0.036292, -0.035912, -0.012221, -0.012536, -0.0066538,
        -0.00031625, 0.0019172, -4.8442e-05, -0.38777, 0.00048064, 0.00026645, 0.00026781, -0.0021835, -0.0021791,
        0.11596, 3.762e-05, -0.018466, -0.00013731, -0.00017518, 0.26853, 0.0029406, -0.36866, 0.06906, -0.068759,
        0.16065, -0.16114, -0.00039045, -0.05338, -0.00010239, 0.088039, -0.00010145, 0.34184, 0.00069872, -0.00069808,
        0.025822, -0.025865, -0.00010661, -0.090562, -0.00022387, -0.069622, 0.00015467, -0.068813, -0.0032439, -0.0623,
        -0.048193, 0.047905, -0.06692, 0.067509, 0.00017005, 0.045836, 9.9534e-05, 0.014251, 0.00010923, -0.38814,
        -6.5303e-05, 6.4666e-05, -0.0012387, 0.0012718, 0.00011079, -0.016202, 0.00011615, 0.062839;

    K12 << 2.4125, 0.53676, -53.733, 3.3199, 0.79713, 0.13436, 0.16397, 1.2694, 4.5662, -1.1501, -0.0024063, -0.49758,
        -4.5748, 8.0898, 0.062092, 0.0098814, -0.26634, 0.2865, 1.4784, 0.85429, 2.3718, -1.5796, 2.4226, -0.53442,
        -53.936, -3.3059, 0.13595, 0.80161, 1.266, 0.17131, 4.5783, 1.1427, 0.0046184, 0.49756, -4.5638, -8.0774,
        0.0098904, 0.062117, 0.28716, -0.2651, 1.4865, -0.85048, 2.381, 1.5553, 0.57651, 0.62819, 14.615, 5.4476,
        1.7302, 0.74538, 0.46141, 1.4384, 6.3844, -1.6003, 0.88936, -0.94637, 2.9128, 11.91, -0.0026738, 0.002476,
        0.13054, 0.32186, 0.14764, 1.4063, 3.5626, -2.366, 0.59432, -0.62962, 14.258, -5.4382, 0.7477, 1.7402, 1.4261,
        0.48429, 6.4091, 1.6162, 0.90147, 0.94837, 2.9301, -11.94, 0.0025046, -0.0026423, 0.32356, 0.13221, 0.161,
        -1.4036, 3.5793, 2.3391, 0.10468, 0.015107, -0.22066, 0.078438, 1.0878, 0.094962, 0.10074, 0.054673, 0.58069,
        0.012796, 0.022608, -0.0019434, 0.0049905, 0.058504, 0.75222, 0.00031857, -0.0025827, 0.0055998, 0.031311,
        0.021618, 0.25807, -0.061656, 0.10511, -0.015227, -0.22789, -0.075997, 0.094939, 1.0889, 0.05339, 0.10286,
        0.58229, -0.012536, 0.022755, 0.0020167, 0.0048915, -0.059489, 0.00031886, 0.75223, 0.0055911, -0.0025605,
        0.03151, -0.02104, 0.25886, 0.057824, -0.07371, -0.82398, 7.2985, 1.5146, 0.055917, 0.066406, 0.75033, 0.3097,
        0.44282, 0.28541, 0.081728, -0.46588, 0.24628, -0.99431, 0.0006822, -4.5928e-05, 0.69643, 0.068402, -0.055718,
        0.3761, 0.22744, 0.17206, -0.071914, 0.82423, 7.2526, -1.5191, 0.067119, 0.057376, 0.31048, 0.75717, 0.44752,
        -0.27637, 0.082699, 0.46681, 0.24562, 0.98344, -4.1279e-05, 0.00068194, 0.068482, 0.69648, -0.055129, -0.37721,
        0.22902, -0.17091, 0.16875, 0.00011332, -5.2736, 0.00016936, -0.030841, -0.030912, -0.004457, -0.0047827,
        -0.0099576, -0.00050389, -0.0098007, -3.3643e-05, -0.41346, 0.00091064, 0.00030032, 0.00030072, -0.0026113,
        -0.0025908, 0.1191, 4.7912e-05, -0.020299, -0.0001976, -0.00012452, 0.20222, 0.0011012, -0.40565, 0.018536,
        -0.018782, 0.090895, -0.090528, -0.0004279, -0.017628, -9.2934e-05, 0.091307, -0.00015819, 0.052289, 0.0010363,
        -0.0010371, 0.036573, -0.036628, -6.2503e-05, -0.096869, -0.00021903, -0.021928, 0.00036492, -0.084238,
        -0.0066547, -0.046636, -0.021871, 0.022182, -0.0098757, 0.0099967, 0.00062006, 0.068982, 0.0002606, 0.012089,
        0.00039973, -0.44096, -0.00019624, 0.00019762, -0.0095984, 0.0096887, 0.00026306, -0.012501, 0.00039257,
        0.095759;

    K13 << 1.9601, 0.74561, -33.044, 2.5202, 0.4015, 0.2213, -0.82113, 0.093454, 5.8933, -1.2904, -0.050683, -0.2258,
        -3.0809, 7.7381, 0.060342, 0.0065426, -0.28599, 0.18154, 1.1169, 0.65489, 3.0782, -1.5385, 1.9706, -0.73652,
        -33.258, -2.5253, 0.23743, 0.37957, 0.0821, -0.80582, 5.9068, 1.2854, -0.043019, 0.22721, -3.0683, -7.734,
        0.0065957, 0.060285, 0.18266, -0.28353, 1.125, -0.65531, 3.0893, 1.5038, 0.62499, 1.1604, 18.492, 3.2002,
        0.62083, 0.35576, 0.54826, 0.023641, 6.7692, -1.577, 0.3996, -0.40733, 1.3853, 10.237, 0.0030277, -0.0019927,
        0.29585, 0.16583, 0.15127, 0.85213, 3.7085, -2.1647, 0.64092, -1.1405, 18.284, -3.2388, 0.38495, 0.57991,
        0.016387, 0.54923, 6.8009, 1.5904, 0.41261, 0.41319, 1.4137, -10.262, -0.0018609, 0.0028018, 0.16942, 0.2957,
        0.16346, -0.86038, 3.7297, 2.1264, 0.044468, -0.0098346, 0.11453, 0.051379, 0.93502, 0.024969, -0.0183,
        -0.048584, 0.23439, 0.0087375, 0.011048, -0.010659, 0.020236, -0.010109, 0.75178, 0.00016488, -0.0054623,
        0.0045666, 0.013993, 0.013812, 0.098261, -0.009419, 0.04086, 0.011257, 0.11803, -0.051145, 0.02495, 0.93006,
        -0.044789, -0.016762, 0.21751, -0.0085133, 0.010799, 0.010934, 0.020792, 0.010739, 0.00016388, 0.75177,
        0.0045618, -0.0054703, 0.01265, -0.0136, 0.091162, 0.0064432, -0.16745, -0.81515, 6.2259, 1.6067, -0.041136,
        -0.050775, 1.5549, 0.3686, -0.26809, 0.33542, 0.17359, -0.54768, 0.55417, -0.9866, 0.00034619, 7.376e-06,
        0.69612, 0.089417, -0.086215, 0.38422, -0.08427, 0.12441, -0.16915, 0.8164, 6.3316, -1.6125, -0.054513,
        -0.037994, 0.36797, 1.5437, -0.2643, -0.32415, 0.17081, 0.5467, 0.54952, 0.97587, 1.0367e-06, 0.00034895,
        0.089479, 0.6951, -0.087546, -0.3857, -0.083675, -0.1271, 0.16938, -5.4275e-06, -5.7736, 0.00026592, -0.020195,
        -0.018744, -0.0082945, -0.0082692, -0.016937, -0.00046216, -0.016399, -2.0295e-05, -0.43274, 0.00063583,
        0.00031865, 0.00032271, -0.001456, -0.0014529, 0.12108, 6.5673e-05, -0.023197, -0.00019339, 0.00018819, 0.17421,
        -0.011427, -0.43392, 0.010757, -0.010144, 0.10814, -0.10902, -0.00038205, 0.0093463, 0.00012445, 0.087194,
        -6.4055e-05, -0.077035, 0.0014485, -0.0014468, 0.038855, -0.039015, 0.00012373, -0.10156, -0.00019816, -0.00404,
        0.00024189, -0.092509, 0.0011754, -0.0013465, -0.0077936, 0.0073664, -0.05101, 0.051219, 0.00083517, 0.073467,
        0.00016555, 0.0092115, 0.00045666, -0.43018, -0.00046217, 0.00046103, -0.01902, 0.019202, 0.00019566,
        -0.0014155, 0.00054085, 0.10414;
  }
  virtual ~adaptivelqrVant5Aerod()
  {
  }

  void config()
  {
  }

  /************************** Bump Function ****************/
private:
  double Bumpfcn(double u, double center, double cutoff)
  {
    double om = (u - center) / cutoff;
    if (abs(om) < 1)
    {
      return pow(e, (-1.0 / (1.0 - pow(om, 2.0))));
    }
    else
    {
      return 0.0;
    }
  }

  /************************** Trajetória Proportion W/ Trims X and U ****************/
private:
  Eigen::VectorXd ForwardVelocitytoAlpha(double xp)
  {
    if (xp >= 47.99)
    {
      xp = 47.99;
    }

    double xpf = floor(xp);

    const auto xpIndex = static_cast<int>(xpf);

    double Proportion = xp - xpf;
    double AlphafR = (1 - Proportion) * Xtrim(4, xpIndex) + Proportion * Xtrim(4, xpIndex + 1);
    double AlphafL = (1 - Proportion) * Xtrim(5, xpIndex) + Proportion * Xtrim(5, xpIndex + 1);
    double AlphabR = (1 - Proportion) * Xtrim(6, xpIndex) + Proportion * Xtrim(6, xpIndex + 1);
    double AlphabL = (1 - Proportion) * Xtrim(7, xpIndex) + Proportion * Xtrim(7, xpIndex + 1);
    Eigen::VectorXd ueq(11);

    ueq = (1 - Proportion) * Utrim.col(xpIndex) + Proportion * Utrim.col(xpIndex + 1);

    Eigen::VectorXd ForwardReturn(15);

    ForwardReturn << AlphafR, AlphafL, AlphabR, AlphabL, ueq;
    return ForwardReturn;
  }

  /************************** Trajetória Completa Matlab ****************/

  Eigen::VectorXd TrajectoryForwardAccelerationCircularDeceleration(double Tempo)
  {
    Eigen::VectorXd Traj(8);
    const double MaxVel = 47.5;
    const double Acceleration = 1;
    const double TMaxVel = MaxVel / Acceleration;
    const double ZPos = 5;
    const double ZPosF = 5;

    const double TForwardFlight = 30;
    const double TForwardFlight2 = 30;

    const double TCircular = 85;
    const double R = MaxVel * TCircular / (2 * pi);

    double x, y, z, psi, xp, yp, zp, psip;

    if (Tempo <= TMaxVel)
    {
      x = (1.0 / 2.0) * Acceleration * pow(Tempo, 2);
      y = 0;
      z = (1.0 / 2.0) * (2 * ZPos / pow(TMaxVel, 2)) * pow(Tempo, 2) + 1;
      psi = 0;

      xp = Acceleration * Tempo;
      yp = 0;
      zp = (2 * ZPos / pow(TMaxVel, 2)) * Tempo;
      psip = 0;
    }
    else if (Tempo > TMaxVel && Tempo <= (TMaxVel + TForwardFlight))
    {
      Traj = TrajectoryForwardAccelerationCircularDeceleration(TMaxVel);
      Tempo = Tempo - TMaxVel;
      const double x0 = Traj(0);
      const double v0 = Traj(4);

      x = x0 + v0 * Tempo;
      y = 0;
      z = Traj(2);
      psi = 0;

      xp = v0;
      yp = 0;
      zp = 0;
      psip = 0;
    }
    else if (Tempo > (TMaxVel + TForwardFlight) && Tempo <= (TMaxVel + TForwardFlight + (3.0 / 4.0) * TCircular))
    {
      Tempo = Tempo - (TMaxVel + TForwardFlight);
      Traj = TrajectoryForwardAccelerationCircularDeceleration(TMaxVel + TForwardFlight);

      const double xi = Traj(0);
      const double yi = Traj(1);
      const double zi = Traj(2);

      x = R * cos(2 * pi * Tempo / TCircular - pi / 2) + xi;
      y = R * sin(2 * pi * Tempo / TCircular - pi / 2) + R + yi;
      z = zi;
      psi = 2 * pi * Tempo / TCircular;

      xp = (2 * R * pi * sin(pi / 2 - (2 * pi * Tempo) / TCircular)) / TCircular;
      yp = (2 * R * pi * cos(pi / 2 - (2 * pi * Tempo) / TCircular)) / TCircular;
      zp = 0;
      psip = 2 * pi / TCircular;
    }
    else if (Tempo > (TMaxVel + TForwardFlight + (3.0 / 4.0) * TCircular) &&
             Tempo <= (TMaxVel + TForwardFlight + (3.0 / 4.0) * TCircular + TForwardFlight2))
    {
      Tempo = Tempo - (TMaxVel + TForwardFlight + (3.0 / 4.0) * TCircular);
      Traj = TrajectoryForwardAccelerationCircularDeceleration(TMaxVel + TForwardFlight + (3.0 / 4.0) * TCircular);

      x = Traj(0);
      y = Traj(1) + Traj(5) * Tempo;
      z = Traj(2);
      psi = Traj(3);

      xp = 0;
      yp = Traj(5);
      zp = 0;
      psip = 0;
    }
    else if (Tempo > (TMaxVel + TForwardFlight + (3.0 / 4.0) * TCircular + TForwardFlight2) &&
             Tempo <= (TMaxVel + TForwardFlight + (3.0 / 4.0) * TCircular + TForwardFlight2 + TMaxVel))
    {
      Tempo = Tempo - (TMaxVel + TForwardFlight + (3.0 / 4.0) * TCircular + TForwardFlight2);
      Traj = TrajectoryForwardAccelerationCircularDeceleration(TMaxVel + TForwardFlight + (3.0 / 4.0) * TCircular +
                                                               TForwardFlight2);

      x = Traj(0);
      y = Traj(1) + Traj(5) * Tempo + (1.0 / 2.0) * Acceleration * pow(Tempo, 2);
      z = Traj(2) - (1.0 / 2.0) * (2 * ZPosF / pow(TMaxVel, 2)) * (pow(Tempo, 2));
      psi = Traj(3);

      xp = 0;
      yp = Traj(5) + Acceleration * Tempo;
      zp = -(2 * ZPosF / pow(TMaxVel, 2)) * Tempo;
      psip = 0;
    }
    else
    {
      Traj = TrajectoryForwardAccelerationCircularDeceleration(
          (TMaxVel + TForwardFlight + (3.0 / 4.0) * TCircular + TForwardFlight2 + TMaxVel));

      x = Traj(0);
      y = Traj(1);
      z = Traj(2);
      psi = Traj(3);

      xp = 0;
      yp = 0;
      zp = 0;
      psip = Traj(7);
    }

    Traj << x, y, z, psi, xp, yp, zp, psip;
    return Traj;
  }

  /************************ Ref no Body **************************/
  /****************************************************************/

  Eigen::VectorXd TrajectoryForwardAccelerationCircularDecelerationBody(double Tempo)
  {
    Eigen::VectorXd TrajAux(8), xyz(3), phithetapsi(3), dxyz(3), dphithetapsi(3), UVW(3), PQR(3), out(15), qr(10),
        qpr(10), Traj(31);
    double phi, theta, psi;
    Eigen::MatrixXd RIB(3, 3), Wn(3, 3);

    TrajAux = TrajectoryForwardAccelerationCircularDeceleration(Tempo);
    xyz << TrajAux(0), TrajAux(1), TrajAux(2);
    phi = 0;
    theta = 0;
    psi = TrajAux(3);
    dxyz << TrajAux(4), TrajAux(5), TrajAux(6);
    dphithetapsi << 0, 0, TrajAux(7);
    Wn << 1, 0, -sin(theta), 0, cos(phi), sin(phi) * cos(theta), 0, -sin(phi), cos(phi) * cos(theta);
    RIB << (cos(psi) * cos(theta)), (cos(psi) * sin(phi) * sin(theta) - cos(phi) * sin(psi)),
        (sin(phi) * sin(psi) + cos(phi) * cos(psi) * sin(theta)), (cos(theta) * sin(psi)),
        (cos(phi) * cos(psi) + sin(phi) * sin(psi) * sin(theta)),
        (cos(phi) * sin(psi) * sin(theta) - cos(psi) * sin(phi)), (-sin(theta)), (cos(theta) * sin(phi)),
        (cos(phi) * cos(theta));

    UVW = RIB.transpose() * dxyz;

    PQR = Wn * dphithetapsi;

    out = ForwardVelocitytoAlpha(UVW(0));

    double AlphafR = out(0);
    double AlphafL = out(1);
    double AlphabR = out(2);
    double AlphabL = out(3);

    qr << xyz(0), xyz(1), xyz(2), 0, 0, psi, AlphafR, AlphafL, AlphabR, AlphabL;
    qpr << UVW(0), UVW(1), UVW(2), PQR(0), PQR(1), PQR(2), 0, 0, 0, 0;

    Traj << qr, qpr, out(4), out(5), out(6), out(7), out(8), out(9), out(10), out(11), out(12), out(13), out(14);

    return Traj;
  }

  /************************ Ref transition**************************/
  /****************************************************************/

  Eigen::VectorXd TrajetoriaReferenciaTransition(double Tempo)
  {
    Eigen::VectorXd Traj(31);  //[x y z phi theta psi Ar Al Al Ar u v w p q r Arp Alp Alp Arp]

    const double MaxVel = 47.5;
    const double Acceleration = 1.0;
    double TMaxVel = MaxVel / Acceleration;
    double TForwardFlight = 20.0;
    double x, y, z, psi, xp, yp, zp, psip;

    if (Tempo < TMaxVel)
    {
      x = (1.0 / 2.0) * Acceleration * pow(Tempo, 2.0);
      y = 0.0;
      z = 2.0;
      psi = 0.0;

      xp = Acceleration * Tempo;
      yp = 0.0;
      zp = 0.0;
      psip = 0.0;
    }
    else if (Tempo >= TMaxVel && Tempo <= (TMaxVel + TForwardFlight))
    {
      Tempo = Tempo - TMaxVel;

      x = (1.0 / 2.0) * Acceleration * pow(TMaxVel, 2.0) + Acceleration * TMaxVel * Tempo;
      y = 0.0;
      z = 2.0;
      psi = 0.0;

      xp = Acceleration * TMaxVel;
      yp = 0.0;
      zp = 0.0;
      psip = 0.0;
    }
    else if (Tempo > (TMaxVel + TForwardFlight) && Tempo <= (2.0 * TMaxVel + TForwardFlight))
    {
      Tempo = Tempo - (TMaxVel + TForwardFlight);

      x = (1.0 / 2.0) * Acceleration * pow(TMaxVel, 2) + Acceleration * TMaxVel * (TForwardFlight) +
          Acceleration * TMaxVel * Tempo - (1.0 / 2.0) * Acceleration * pow(Tempo, 2);
      y = 0;
      z = 2.0;
      psi = 0;

      xp = Acceleration * TMaxVel - Acceleration * Tempo;
      yp = 0;
      zp = 0;
      psip = 0;
    }
    else
    {
      double TempoFinal = TMaxVel;

      x = (1.0 / 2.0) * Acceleration * pow(TMaxVel, 2) + Acceleration * TMaxVel * (TForwardFlight) +
          Acceleration * TMaxVel * TempoFinal - (1.0 / 2.0) * Acceleration * pow(TempoFinal, 2);
      y = 0;
      z = 2.0;
      psi = 0;

      xp = 0;
      yp = 0;
      zp = 0;
      psip = 0;
    }

    Eigen::VectorXd out(15);
    out = ForwardVelocitytoAlpha(xp);

    double AlphafR = out(0);
    double AlphafL = out(1);
    double AlphabR = out(2);
    double AlphabL = out(3);

    Eigen::VectorXd qr(10);
    Eigen::VectorXd qpr(10);
    qr << x, y, z, 0, 0, psi, AlphafR, AlphafL, AlphabR, AlphabL;
    qpr << xp, yp, zp, 0, 0, psip, 0, 0, 0, 0;

    Traj << qr, qpr, out(4), out(5), out(6), out(7), out(8), out(9), out(10), out(11), out(12), out(13), out(14);

    return Traj;
  }

  /********************************* EXECUTE **************************************/
  std::vector<double> execute(simulator_msgs::SensorArray arraymsg)
  {
    simulator_msgs::Sensor msg;
    bool found = false;
    for (int i = 0; i < arraymsg.values.size(); i++)
    {
      if (arraymsg.values.at(i).name == "Estados")
      {
        msg = arraymsg.values.at(i);
        found = true;
        break;
      }
    }
    if (!found)
    {
      // In case of error, report the problem in a ROS_LOG, and returns an
      // empty array
      ROS_FATAL("[adaptivelqrVant5Aerod] State vector not found.");
      std::vector<double> out(Input.data(), Input.data() + Input.size());
      return out;
    }
    //		ros::Time time = ros::Time::now();
    //	double Time = time.toSec();
    static double Time = 0;

    //	std::cout << "tempo:" << Time << std::endl;

    X << msg.values.at(0),  // x
        msg.values.at(1),   // y
        msg.values.at(2),   // z
        msg.values.at(3),   // phi
        msg.values.at(4),   // th
        msg.values.at(5),   // psi
        msg.values.at(6),   // a1
        msg.values.at(7),   // a2
        msg.values.at(8),   // a3
        msg.values.at(9),   // a4
        msg.values.at(10),  // xp
        msg.values.at(11),  // yp
        msg.values.at(12),  // zp
        msg.values.at(13),  // phip
        msg.values.at(14),  // thp
        msg.values.at(15),  // psip
        msg.values.at(16),  // a1p
        msg.values.at(17),  // a2p
        msg.values.at(18),  // a3p
        msg.values.at(19);  // a4p

    /******************* TRAJECTORY *******************************/
    /*************************************************************/
    Trajetoria = TrajectoryForwardAccelerationCircularDecelerationBody(Time);
    double phi = msg.values.at(3);
    double theta = msg.values.at(4);
    double psi = msg.values.at(5);

    // Deal's with Psi Discontinuity at 180 degree
    if (psi - Trajetoria(5) < -pi)
    {
      psi = psi + 2 * pi;
    }
    else if (psi - Trajetoria(5) > pi)
    {
      psi = psi - 2 * pi;
    }
    RIB << (cos(psi) * cos(theta)), (cos(psi) * sin(phi) * sin(theta) - cos(phi) * sin(psi)),
        (sin(phi) * sin(psi) + cos(phi) * cos(psi) * sin(theta)), (cos(theta) * sin(psi)),
        (cos(phi) * cos(psi) + sin(phi) * sin(psi) * sin(theta)),
        (cos(phi) * sin(psi) * sin(theta) - cos(psi) * sin(phi)), (-sin(theta)), (cos(theta) * sin(phi)),
        (cos(phi) * cos(theta));

    Wn << 1.0, 0.0, -sin(theta), 0.0, cos(phi), cos(theta) * sin(phi), 0.0, -sin(phi), cos(phi) * cos(theta);

    Eigen::VectorXd XpYpZp(3);
    Eigen::VectorXd PhipThetapPsip(3);
    Eigen::VectorXd uvw(3);
    Eigen::VectorXd pqr(3);

    PhipThetapPsip << msg.values.at(13),  // phip
        msg.values.at(14),                // thp
        msg.values.at(15);                // psip
    XpYpZp << msg.values.at(10),          // xp
        msg.values.at(11),                // yp
        msg.values.at(12);                // zp

    uvw = RIB.transpose() * XpYpZp;
    pqr = Wn * PhipThetapPsip;

    /*****************************kinematic controller****************************/
    /*******************************************************************************/
    // proportional
    Eigen::VectorXd Xk(3);
    Eigen::VectorXd Uk(3);
    Eigen::MatrixXd Kk(3, 3);
    Eigen::MatrixXd Kki(3, 3);
    Xk << Trajetoria(0) - msg.values.at(0), Trajetoria(1) - msg.values.at(1), 0;  // xtr-x, ytr-y
    Uk << Trajetoria(10), Trajetoria(11), Trajetoria(12);
    Kk << 0.1, 0, 0, 0, 0.1, 0, 0, 0, 0;
    // integral
    Kki << 0.001, 0, 0, 0, 0.001, 0, 0, 0, 0;
    static double xint, x_ant = 0;
    static double yint, y_ant = 0;

    double x_atual = Trajetoria(0) - msg.values.at(0);
    xint = xint + (T / 2.0) * (x_atual + x_ant);
    x_ant = x_atual;

    double y_atual = Trajetoria(1) - msg.values.at(1);
    yint = yint + (T / 2.0) * (y_atual + y_ant);
    y_ant = y_atual;

    Eigen::VectorXd Xki(3);
    Xki << xint, yint, 0;

    // kinematic controller  action
    Eigen::VectorXd Dk(3);
    Dk = Kk * RIB.transpose() * Xk + Kki * RIB.transpose() * Xki + Uk;
    //	Dk = Kk*RIB.transpose()*Xk+Uk;
    Trajetoria(10) = Dk(0);
    Trajetoria(11) = Dk(1);
    Trajetoria(12) = Dk(2);

    /* TEM Q MUDAR O INDEX DO INTEGRADOR PRA USAR ASSIM!!!!!! */
    Xref_ << Trajetoria(2),  // zref
        Trajetoria(3),       // phiref
        Trajetoria(4),       // thetaref
        Trajetoria(5),       // psiref
        Trajetoria(6),       // a1ref
        Trajetoria(7),       // a2ref
        Trajetoria(8),       // a3ref
        Trajetoria(9),       // a4ref
        Trajetoria(10),      // uref
        Trajetoria(11),      // vref
        Trajetoria(12),      // wref
        Trajetoria(13),      // pref
        Trajetoria(14),      // qref
        Trajetoria(15),      // wref
        Trajetoria(16),      // a1refp
        Trajetoria(17),      // a2refp
        Trajetoria(18),      // a3refp
        Trajetoria(19),      // a4refp
        0,                   // zintref
        0,                   // psiintref
        0,                   // uintref
        0;                   // vintref
    //	std::cout << "refz:" <<  Trajetoria(2) << std::endl;

    Uequ << Trajetoria(20), Trajetoria(21), Trajetoria(22), Trajetoria(23), Trajetoria(24), Trajetoria(25),
        Trajetoria(26), Trajetoria(27), Trajetoria(28), Trajetoria(29), Trajetoria(30);
    //*/

    // Integrators *****************************************/
    static double zint = 0, z_ant = 0;
    static double yawint = 0, yaw_ant = 0;
    static double uint = 0, u_ant = 0;
    static double vint = 0, v_ant = 0;

    //	double z_error = msg.values.at(2)-ref_full(0);
    double z_error = msg.values.at(2) - Trajetoria(2);
    zint = zint + (T / 2.0) * (z_error + z_ant);
    z_ant = z_error;

    //  double yaw_error = msg.values.at(5)-ref_full(3);
    double yaw_error = psi - Trajetoria(5);
    yawint = yawint + (T / 2.0) * (yaw_error + yaw_ant);
    yaw_ant = yaw_error;

    //	double u_error = uvw(0)-ref_full(8);
    double u_error = uvw(0) - Trajetoria(10);
    uint = uint + (T / 2.0) * (u_error + u_ant);
    u_ant = u_error;

    //	double v_error = uvw(1)-ref_full(9);
    double v_error = uvw(1) - Trajetoria(11);
    vint = vint + (T / 2.0) * (v_error + v_ant);
    v_ant = v_error;

    intqctil << z_ant, yaw_ant, u_ant, vint;

    //*************************************************/

    X_ << msg.values.at(2),  // z
        msg.values.at(3),    // phi
        msg.values.at(4),    // th
        psi,                 // psi
        msg.values.at(6),    // a1
        msg.values.at(7),    // a2
        msg.values.at(8),    // a3
        msg.values.at(9),    // a4
        uvw(0), uvw(1), uvw(2), pqr(0), pqr(1), pqr(2),
        msg.values.at(16),  // a1p
        msg.values.at(17),  // a2p
        msg.values.at(18),  // a3p
        msg.values.at(19),  // a4p
        intqctil;           // integrators

    Xmatlab << msg.values.at(0), msg.values.at(1), X_;

    Xrefmatlab << Trajetoria(0), Trajetoria(1), Xref_;

    static double IntervalsUb[13][2] = { { -3.0, 3.0 },  { 1.0, 7.0 },   { 5.0, 11.0 },  { 9.0, 15.0 },  { 13.0, 19.0 },
                                         { 17.0, 23.0 }, { 21.0, 27.0 }, { 25.0, 31.0 }, { 29.0, 35.0 }, { 33.0, 39.0 },
                                         { 37.0, 43.0 }, { 41.0, 47.0 }, { 45.0, 51.0 } };

    static double CenterUb[13] = { 0.0, 4.0, 8.0, 12.0, 16.0, 20.0, 24.0, 28.0, 32.0, 36.0, 40.0, 44.0, 48.0 };

    static double CutOffUb[13] = { 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0 };

    double Psi[13];
    double somaPsi = 0;
    double Eta[13];
    double Uvento = Trajetoria(10);
    if (Uvento <= 0.1)
    {
      Uvento = 0.1;
    }
    else if (Uvento > 45.9)
    {
      Uvento = 45.9;
    }

    for (int i = 0; i < 13; i++)
    {
      Psi[i] = Bumpfcn(Uvento, CenterUb[i], CutOffUb[i]);
      somaPsi = somaPsi + Psi[i];
    }
    for (int i = 0; i < 13; i++)
    {
      Eta[i] = Psi[i] / somaPsi;
    }
    // Stspts = Eta[0]*Sts1 + Eta[1]*Sts2 + Eta[2]*Sts3 + Eta[3]*Sts4 + Eta[4]*Sts5 + Eta[5]*Sts6 + Eta[6]*Sts7+
    // Eta[7]*Sts8+ Eta[8]*Sts9+ Eta[9]*Sts10+ Eta[10]*Sts11;

    /******************* CONTROL *******************************/
    /*************************************************************/

    Ku = Eta[0] * K1 + Eta[1] * K2 + Eta[2] * K3 + Eta[3] * K4 + Eta[4] * K5 + Eta[5] * K6 + Eta[6] * K7 + Eta[7] * K8 +
         Eta[8] * K9 + Eta[9] * K10 + Eta[10] * K11 + Eta[11] * K12 + Eta[12] * K13;
    Erro = X_ - Xref_;

    Input2 << -Ku * Erro + Uequ;
    Input << Input2(0), Input2(1), Input2(2), Input2(3), Input2(4), Input2(5), Input2(6), Input2(7), Input2(8),
        Input2(8), -Input2(9), Input2(9), Input2(10), Input2(10);

    Time = Time + T;

    std::vector<double> out(Input.data(), Input.data() + Input.rows() * Input.cols());
    return out;
  }

  std::vector<double> Reference()
  {
    std::vector<double> out(Xrefmatlab.data(), Xrefmatlab.data() + Xrefmatlab.rows() * Xrefmatlab.cols());
    return out;
  }

  std::vector<double> Error()
  {
    std::vector<double> out(Erro.data(), Erro.data() + Erro.rows() * Erro.cols());
    return out;
  }

  std::vector<double> State()
  {
    std::vector<double> out(Xmatlab.data(), Xmatlab.data() + Xmatlab.rows() * Xmatlab.cols());
    return out;
  }
};

extern "C" {
Icontroller* create(void)
{
  return new adaptivelqrVant5Aerod;
}
void destroy(Icontroller* p)
{
  delete p;
}
}
