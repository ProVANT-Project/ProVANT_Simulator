/*
 * This file is part of the ProVANT simulator project.
 * Licensed under the terms of the MIT open source license. More details at
 * https://github.com/Guiraffo/ProVANT-Simulator/blob/master/LICENSE.md
 */
/**
 * @file This file contains the implementation of the LqrVant5 class.
 *
 * @author Jonatan Campos
 */

#include <control_strategies_base/icontroller.hpp>
#include <iostream>
#include <Eigen/Eigen>
#include "simulator_msgs/Sensor.h"
#include <ros/ros.h>

static const int NINPUTS = 8;
static const int NSTATES = 20;

class LqrVant5 : public Icontroller
{
private:
  //! Stores the reference vector
  Eigen::VectorXd Xref;
  //! Stores the error vector
  Eigen::VectorXd Erro;
  //! Stores the control inputs
  Eigen::VectorXd Input;
  //! Stores the gain matrix of the system
  Eigen::MatrixXd K;
  //! Stores the state vector
  Eigen::VectorXd X;

public:
  LqrVant5() : Xref(NSTATES), K(NINPUTS, NSTATES), X(NSTATES), Erro(NSTATES), Input(NINPUTS)
  {
    config();
  }
  virtual ~LqrVant5()
  {
  }

  void config()
  {
    // LQR Gain
    /*K <<
    -34.823,42.847,37.893,-186.9,-169.14,-20.005,-141.52,69.317,-172.54,129.84,-48.182,58.733,45.338,-28.632,-37.782,-35.789,4.3214,5.5877,-12.581,40.231,
    -34.822,-42.845,37.893,186.89,-169.14,20.005,69.316,-141.52,129.84,-172.54,-48.182,-58.73,45.339,28.63,-37.783,35.789,5.5877,4.3215,40.232,-12.58,
    50.421,56.191,37.17,-244.35,220.64,13.309,109.81,-58.079,212.01,-33.363,69.228,77.126,48.147,-39.602,37.612,23.518,-3.8906,-4.5125,44.25,2.3995,
    50.423,-56.187,37.172,244.33,220.65,-13.309,-58.077,109.81,-33.353,212.01,69.23,-77.121,48.149,39.6,37.612,-23.517,-4.5125,-3.8906,2.402,44.252,
    0.15591,0.010613,-0.039121,-0.026484,0.62927,0.13524,0.94815,-0.24946,0.74691,-0.62166,0.21389,0.013376,-0.069948,-0.005622,0.053346,0.22657,0.2768,-0.0041377,0.030432,-0.010914,
    0.15591,-0.010613,-0.039118,0.026482,0.62927,-0.13524,-0.24946,0.94815,-0.62166,0.74691,0.21389,-0.013376,-0.069945,0.0056201,0.053348,-0.22657,-0.0041377,0.2768,-0.010914,0.030431,
    0.02434,0.0051749,-0.20523,0.022111,0.038376,0.14523,0.61248,-0.36666,0.68036,-0.76415,0.031199,0.0039426,-0.24208,0.0030888,-0.035701,0.24094,0.0046742,-0.0018696,0.16705,-0.013125,
    0.024342,-0.0051649,-0.20523,-0.022166,0.038386,-0.14523,-0.36665,0.61247,-0.76413,0.68034,0.031201,-0.003928,-0.24208,-0.0031003,-0.035699,-0.24094,-0.0018695,0.0046741,-0.013126,0.16705;
    */
    /*
    K <<
    -10.724,12.969,14.939,-63.574,-63.004,-2.5585,-32.066,8.1222,-40.898,13.305,-15.655,18.29,19.933,-11.111,-15.168,-4.9798,0.35867,0.59753,-2.5268,6.9373,
    -10.724,-12.969,14.939,63.573,-63.004,2.5585,8.1221,-32.066,13.306,-40.898,-15.655,-18.29,19.933,11.111,-15.168,4.9797,0.59753,0.35867,6.9375,-2.5264,
    15.501,18.204,14.565,-89.991,83.282,1.7873,29.334,-2.0515,51.085,4.4905,22.289,25.766,20.247,-16.328,18.003,3.3237,-0.34252,-0.4827,9.3697,1.4256,
    15.501,-18.203,14.566,89.988,83.285,-1.7872,-2.0507,29.334,4.4932,51.085,22.29,-25.765,20.247,16.327,18.003,-3.3234,-0.48269,-0.34252,1.4261,9.3701,
    0.15233,0.007699,-0.031803,-0.012237,0.65102,0.13745,1.0366,-0.31956,0.81367,-0.68739,0.21197,0.0094747,-0.062551,-0.003585,0.05848,0.23083,0.27973,-0.0021662,0.044776,-0.02612,
    0.15233,-0.007699,-0.031801,0.012234,0.65102,-0.13745,-0.31956,1.0366,-0.68739,0.81367,0.21197,-0.0094745,-0.062549,0.003583,0.058482,-0.23083,-0.0021662,0.27973,-0.02612,0.044775,
    0.075738,-0.0053501,-0.1092,0.069459,0.27772,0.17346,0.95213,-0.6396,1.2366,-1.0972,0.10342,-0.010411,-0.13684,0.0073088,0.0024739,0.3016,0.0062367,-0.0037628,0.27988,-0.043616,
    0.075739,0.0053629,-0.10919,-0.069532,0.27773,-0.17346,-0.63959,0.95212,-1.0971,1.2366,0.10342,0.010429,-0.13684,-0.0073231,0.0024769,-0.3016,-0.0037628,0.0062367,-0.043616,0.27988;
    */

    /*K <<
    -2.0778,4.0358,4.6756,-32.97,-48.488,-2.5205,-17.319,11.028,-26.777,10.723,-7.3355,6.5671,8.4821,-7.9792,-11.509,-3.2326,-0.049433,0.3125,-1.9383,3.1194,
    -2.0777,-4.0357,4.6756,32.97,-48.488,2.5204,11.028,-17.319,10.724,-26.776,-7.3352,-6.567,8.4821,7.9791,-11.509,3.2325,0.3125,-0.049432,3.1195,-1.9382,
    4.3389,5.8006,4.8253,-47.03,66.048,2.1569,18.958,0.030155,31.252,3.1382,15.326,9.4334,9.0731,-11.806,13.949,2.4808,0.083278,-0.14514,4.7518,0.69976,
    4.339,-5.8005,4.8253,47.029,66.05,-2.1568,0.030823,18.958,3.1401,31.251,15.326,-9.4331,9.0733,11.806,13.949,-2.4806,-0.14513,0.083271,0.69994,4.7519,
    0.065166,0.00012184,-0.024596,0.021291,0.57384,0.13528,0.86252,-0.1972,0.64837,-0.46272,0.23064,-0.00074246,-0.050824,0.0030693,0.050892,0.13965,0.10917,-0.0024136,0.061452,-0.030788,
    0.065166,-0.00012126,-0.024596,-0.021299,0.57384,-0.13528,-0.1972,0.86252,-0.46271,0.64836,0.23064,0.0007436,-0.050823,-0.0030728,0.050893,-0.13965,-0.0024136,0.10917,-0.030788,0.061451,
    0.033536,-0.0036387,-0.019132,0.047671,0.27124,0.13302,0.6158,-0.3412,0.78439,-0.58705,0.11899,-0.0068883,-0.031476,0.0066071,0.025369,0.14945,0.0081489,-0.0042568,0.13422,-0.036773,
    0.033536,0.0036416,-0.019132,-0.047698,0.27125,-0.13302,-0.3412,0.61578,-0.58703,0.78437,0.11899,0.0068933,-0.031476,-0.0066142,0.02537,-0.14945,-0.0042567,0.0081487,-0.036773,0.13422;
    */

    // works VALIDACAO 13_01_21 -- LINSYS1
    /*K <<
    -1.4738,3.8054,4.3031,-30.338,-42.581,-1.2764,-8.3902,10.089,-20.415,5.4385,-5.1758,6.1573,7.7912,-7.3672,-10.967,-1.9545,1.1348,0.37671,-1.445,3.5041,
    -1.4734,-3.8053,4.3031,30.337,-42.579,1.2757,10.089,-8.3898,5.4388,-20.412,-5.1744,-6.1571,7.7912,7.3669,-10.967,1.9539,0.37672,1.1348,3.5042,-1.4444,
    4.225,5.9479,4.9312,-48.742,65.649,0.16771,15.087,2.4899,26.673,8.7488,14.958,9.7006,9.2918,-12.183,14.019,0.47264,-0.056409,-0.10789,4.7618,1.3737,
    4.2253,-5.9475,4.9314,48.739,65.651,-0.16739,2.4897,15.086,8.7518,26.675,14.959,-9.7,9.2922,12.182,14.019,-0.47227,-0.1079,-0.056437,1.374,4.7621,
    0.068526,0.00016965,-0.030523,0.0039326,0.6515,0.13563,0.86986,-0.19495,0.62465,-0.45177,0.24169,-0.00020076,-0.061158,-0.0011699,0.070925,0.139,0.15018,-0.0030536,0.073169,-0.037904,
    0.068526,-0.00016859,-0.030526,-0.0039487,0.65152,-0.13563,-0.19495,0.86987,-0.45175,0.62464,0.24169,0.00020289,-0.061164,0.0011629,0.070936,-0.139,-0.0030536,0.15018,-0.037904,0.07317,
    0.036047,0.0053708,-0.022392,-0.046392,0.30409,0.13954,0.67518,-0.35445,0.83888,-0.6273,0.12857,0.0087331,-0.036677,-0.016252,0.030333,0.15768,0.0096096,-0.005165,0.17444,-0.042867,
    0.03605,-0.0053635,-0.022391,0.046329,0.30413,-0.13954,-0.35444,0.67517,-0.62726,0.83888,0.12858,-0.0087209,-0.036674,0.016236,0.030346,-0.15768,-0.0051648,0.0096094,-0.042866,0.17444;
    */

    // works VALIDACAO 13_01_21 -- LINSYS2
    /*K <<
    -1.6721,3.8388,4.6128,-30.625,-44.82,-1.2491,-9.7368,7.5256,-19.377,4.5415,-5.9101,6.2127,8.3247,-7.4393,-11.198,-1.873,0.75049,0.2609,-1.3558,2.5995,
    -1.6721,-3.8388,4.6128,30.625,-44.82,1.2491,7.5257,-9.7368,4.5415,-19.377,-5.9102,-6.2127,8.3248,7.4393,-11.198,1.873,0.2609,0.75049,2.5995,-1.3558,
    4.2769,5.9296,4.7964,-48.587,66.393,0.15892,15.14,3.8577,25.02,8.0948,15.117,9.6703,8.9933,-12.144,14.125,0.447,0.020156,-0.044805,3.9098,1.1556,
    4.2769,-5.9296,4.7964,48.587,66.393,-0.15892,3.8578,15.14,8.0948,25.02,15.117,-9.6703,8.9933,12.144,14.125,-0.447,-0.044804,0.020157,1.1556,3.9098,
    0.067153,0.0011736,-0.028264,-0.0044527,0.62836,0.13641,0.88551,-0.2138,0.67251,-0.46336,0.23778,0.0014483,-0.057102,-0.0032717,0.066685,0.14163,0.10898,-0.0028872,0.065772,-0.034424,
    0.067153,-0.0011736,-0.028263,0.004453,0.62836,-0.13641,-0.2138,0.88551,-0.46336,0.67251,0.23778,-0.0014483,-0.057102,0.0032719,0.066684,-0.14163,-0.0028872,0.10898,-0.034424,0.065772,
    0.035676,0.0043973,-0.01856,-0.038133,0.30517,0.13882,0.64191,-0.35141,0.81225,-0.5986,0.12676,0.0071221,-0.030788,-0.014205,0.032339,0.15548,0.0086551,-0.0047148,0.14052,-0.038776,
    0.035676,-0.0043974,-0.01856,0.038134,0.30517,-0.13882,-0.35141,0.64191,-0.5986,0.81225,0.12676,-0.0071223,-0.030788,0.014206,0.032339,-0.15548,-0.0047148,0.0086551,-0.038776,0.14052;
    */
    // works VALIDACAO 13_01_21 -- LINSYS3 y_unit sem rotação

    K << -2.1083, 3.8942, 4.6681, -31.204, -48.757, -2.3482, -16.192, 10.185, -24.894, 8.7343, -7.44, 6.3124, 8.4803,
        -7.577, -11.566, -3.0294, -0.033621, 0.30131, -1.8783, 3.0127, -2.1083, -3.8942, 4.6681, 31.204, -48.757,
        2.3482, 10.185, -16.192, 8.7344, -24.894, -7.44, -6.3124, 8.4803, 7.577, -11.566, 3.0294, 0.30131, -0.033621,
        3.0127, -1.8783, 4.3318, 5.8959, 4.8367, -48.223, 65.806, 0.9575, 17.064, 1.6279, 28.587, 5.4269, 15.297,
        9.6086, 9.1041, -12.059, 13.917, 1.2879, 0.058161, -0.12029, 4.4331, 0.98144, 4.3318, -5.8959, 4.8367, 48.223,
        65.806, -0.95751, 1.6279, 17.064, 5.4269, 28.587, 15.297, -9.6086, 9.1041, 12.059, 13.917, -1.2879, -0.12029,
        0.058162, 0.98144, 4.4331, 0.064943, 0.0034265, -0.023965, -0.020626, 0.5695, 0.13521, 0.86145, -0.19741,
        0.63954, -0.45343, 0.22987, 0.0049882, -0.04966, -0.0066566, 0.049689, 0.13937, 0.10916, -0.0024336, 0.061802,
        -0.03107, 0.064943, -0.0034265, -0.023965, 0.020626, 0.5695, -0.13521, -0.19741, 0.86145, -0.45343, 0.63954,
        0.22987, -0.0049882, -0.04966, 0.0066567, 0.049688, -0.13937, -0.0024336, 0.10916, -0.03107, 0.061802, 0.033772,
        0.0017329, -0.019712, -0.013136, 0.27291, 0.13649, 0.61816, -0.34193, 0.78381, -0.58498, 0.11987, 0.0025664,
        -0.032769, -0.0074869, 0.025413, 0.15225, 0.0081862, -0.0042744, 0.13576, -0.037846, 0.033772, -0.001733,
        -0.019712, 0.013137, 0.2729, -0.13649, -0.34193, 0.61815, -0.58498, 0.78381, 0.11987, -0.0025665, -0.032769,
        0.0074871, 0.025412, -0.15225, -0.0042744, 0.0081862, -0.037846, 0.13576;

    std::cout << "Ganho K inicializado" << std::endl;
  }

  std::vector<double> execute(simulator_msgs::SensorArray arraymsg)
  {
    simulator_msgs::Sensor msg;
    bool found = false;
    for (int i = 0; i < arraymsg.values.size(); i++)
    {
      if (arraymsg.values.at(i).name == "Estados")
      {
        msg = arraymsg.values.at(i);
        found = true;
        break;
      }
    }
    if (!found)
    {
      // In case of error, report the problem in a ROS_LOG, and returns an
      // empty array
      ROS_FATAL("[lqr_vant5] State vector not found.");
      std::vector<double> out(Input.data(), Input.data() + Input.size());
      return out;
    }
    // Get the current simulation time and calculate the reference trajectory.
    ros::Time time = ros::Time::now();
    double tempo = time.toSec();
    //	Xref << 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0,0,0,0,0;
    double f = 0.25;
    float pi = 3.141526;

    Xref << 8 * cos(pi * f * tempo / 5), 8 * sin(2 * pi * f * tempo / 5), 3 - cos(pi * f * tempo / 5), 0, 0, 0, 0, 0, 0,
        0, -8 * f * pi * sin(pi * f * tempo / 5) / 5, 16 * f * pi * cos(2 * pi * f * tempo / 5) / 5,
        f * pi * sin(pi * f * tempo / 5) / 5, 0, 0, 0, 0, 0, 0, 0;

    X << msg.values.at(0),  // x
        msg.values.at(1),   // y
        msg.values.at(2),   // z
        msg.values.at(3),   // roll
        msg.values.at(4),   // pitch
        msg.values.at(5),   // yaw
        msg.values.at(6),   //  aR2
        msg.values.at(7),   //  aL3
        msg.values.at(8),   //  aR4
        msg.values.at(9),   // aL5
        msg.values.at(10),  // x_dot
        msg.values.at(11),  // y_dot
        msg.values.at(12),  // z_dot
        msg.values.at(13),  // roll_dot
        msg.values.at(14),  // pitch_dot
        msg.values.at(15),  // yaw_dot
        msg.values.at(16),  //  daR2
        msg.values.at(17),  //  daL3
        msg.values.at(18),  //  daR4
        msg.values.at(19);  // daL5

    // Calculate the error vector of the system
    Erro = X - Xref;

    // Execute the control law (Multiply the gain matrix by the error vector)
    Input = -K * Erro;

    // Add equilibirium forces to the outputs.
    /*			Input(0) = Input(0) + 53.2;
          Input(1) = Input(1) + 53.2;
          Input(2) = Input(2) + 57.1;
          Input(3) = Input(3) + 57.1;
          Input(4) = Input(4) ;
          Input(5) = Input(5) ;
          Input(6) = Input(6)-0.822 ;
          Input(7) = Input(7)-0.822 ; */
    // linsys 1 e 2
    /*			Input(1) = Input(1) + 53;
          Input(2) = Input(2) + 57.3;
          Input(3) = Input(3) + 57.3;
          Input(4) = Input(4) - 0.0832;
          Input(5) = Input(5) - 0.0832;
          Input(6) = Input(6)-0.726 ;
          Input(7) = Input(7)-0.726 ; */
    // linsys3 y_unit sem rotação
    Input(0) = Input(0) + 53;
    Input(1) = Input(1) + 53;
    Input(2) = Input(2) + 57.3;
    Input(3) = Input(3) + 57.3;
    Input(4) = Input(4) - 0.000249;
    Input(5) = Input(5) - 0.000249;
    Input(6) = Input(6) - 0.813;
    Input(7) = Input(7) - 0.813;

    /*				std::cout<<"FR2:"<< Input(0)<<std::endl;
            std::cout<<"FL3:"<< Input(1)<<std::endl;
            std::cout<<"FR4:"<< Input(2)<<std::endl;
            std::cout<<"FL5:"<< Input(3)<<std::endl;
            std::cout<<"TR2:"<< Input(4)<<std::endl;
          std::cout<<"TL3:"<< Input(5)<<std::endl;
            std::cout<<"TR4:"<< Input(6)<<std::endl;
            std::cout<<"TL5:"<< Input(7)<<std::endl; */

    // Copy the control inputs values to the output vector
    std::vector<double> out(Input.data(), Input.data() + Input.size());
    return out;
  }

  std::vector<double> Reference()
  {
    std::vector<double> out(Xref.data(), Xref.data() + Xref.rows() * Xref.cols());
    return out;
  }

  std::vector<double> Error()
  {
    std::vector<double> out(Erro.data(), Erro.data() + Erro.rows() * Erro.cols());
    return out;
  }

  std::vector<double> State()
  {
    std::vector<double> out(X.data(), X.data() + X.rows() * X.cols());
    return out;
  }
};

// Functions used by the ProVANT Simulator to instantiate this control law
extern "C" {
Icontroller* create(void)
{
  return new LqrVant5;
}
void destroy(Icontroller* p)
{
  delete p;
}
}
